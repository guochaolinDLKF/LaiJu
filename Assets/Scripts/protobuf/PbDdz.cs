// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace com.oegame.ddz.protobuf {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class PbDdz {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_com_oegame_ddz_protobuf_PBPlayer__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.oegame.ddz.protobuf.PBPlayer, global::com.oegame.ddz.protobuf.PBPlayer.Builder> internal__static_com_oegame_ddz_protobuf_PBPlayer__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_oegame_ddz_protobuf_PBError__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.oegame.ddz.protobuf.PBError, global::com.oegame.ddz.protobuf.PBError.Builder> internal__static_com_oegame_ddz_protobuf_PBError__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_oegame_ddz_protobuf_PBRoom__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.oegame.ddz.protobuf.PBRoom, global::com.oegame.ddz.protobuf.PBRoom.Builder> internal__static_com_oegame_ddz_protobuf_PBRoom__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_oegame_ddz_protobuf_PBSeat__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.oegame.ddz.protobuf.PBSeat, global::com.oegame.ddz.protobuf.PBSeat.Builder> internal__static_com_oegame_ddz_protobuf_PBSeat__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_oegame_ddz_protobuf_PBPoker__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.oegame.ddz.protobuf.PBPoker, global::com.oegame.ddz.protobuf.PBPoker.Builder> internal__static_com_oegame_ddz_protobuf_PBPoker__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_oegame_ddz_protobuf_PBPokerGroup__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.oegame.ddz.protobuf.PBPokerGroup, global::com.oegame.ddz.protobuf.PBPokerGroup.Builder> internal__static_com_oegame_ddz_protobuf_PBPokerGroup__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_oegame_ddz_protobuf_PBMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.oegame.ddz.protobuf.PBMessage, global::com.oegame.ddz.protobuf.PBMessage.Builder> internal__static_com_oegame_ddz_protobuf_PBMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_oegame_ddz_protobuf_PBSystem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.oegame.ddz.protobuf.PBSystem, global::com.oegame.ddz.protobuf.PBSystem.Builder> internal__static_com_oegame_ddz_protobuf_PBSystem__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static PbDdz() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "CgxwYl9kZHoucHJvdG8SF2NvbS5vZWdhbWUuZGR6LnByb3RvYnVmIosBCghQ" + 
          "QlBsYXllchIQCghwbGF5ZXJJZBgBIAEoERIQCghuaWNrbmFtZRgCIAEoCRIO" + 
          "CgZnZW5kZXIYAyABKBESDgoGYXZhdGFyGAQgASgJEgwKBGdvbGQYBSABKBES" + 
          "DAoEcG91chgGIAEoERIQCgh1bml4dGltZRgHIAEoEhINCgVjYXJkcxgIIAEo" + 
          "ESIkCgdQQkVycm9yEgwKBGNvZGUYASABKBESCwoDbXNnGAIgASgJIsABCgZQ" + 
          "QlJvb20SDgoGcm9vbUlkGAEgASgREg4KBnN0YXR1cxgCIAEoERIMCgRsb29w" + 
          "GAMgASgREg8KB21heExvb3AYBCABKBESLQoEc2VhdBgFIAMoCzIfLmNvbS5v" + 
          "ZWdhbWUuZGR6LnByb3RvYnVmLlBCU2VhdBIRCgliZWdpblRpbWUYBiABKBIS" + 
          "EQoJYmFzZVNjb3JlGAcgASgREg8KB3N5c1RpbWUYCCABKBISEQoJcmFuZG9t" + 
          "X2R6GAkgASgRIuwCCgZQQlNlYXQSEAoIcGxheWVySWQYASABKBESEAoIbmlj" + 
          "a25hbWUYAiABKAkSDgoGYXZhdGFyGAMgASgJEg4KBmdlbmRlchgEIAEoERIM" + 
          "CgRnb2xkGAUgASgREi8KBXBva2VyGAYgAygLMiAuY29tLm9lZ2FtZS5kZHou" + 
          "cHJvdG9idWYuUEJQb2tlchILCgNwb3MYByABKBESEAoIaXNCYW5rZXIYCCAB" + 
          "KAgSDgoGd2lubmVyGAkgASgIEgwKBHBvdXIYCiABKBESEAoIZGlzc29sdmUY" + 
          "CyABKBESEAoIZWFybmluZ3MYDCABKBESEgoKYm90dG9tUG91chgNIAEoERIO" + 
          "CgZzdGF0dXMYDiABKAgSEgoKc3lzdGVtVGltZRgPIAEoEhISCgpQT0tlckNv" + 
          "dW50GBAgASgREg8KB2RlcG9zaXQYESABKAgSEQoJcGxheWFoYW5kGBIgASgI" + 
          "Eg4KBnJlYWRseRgTIAEoCCJFCgdQQlBva2VyEg0KBWluZGV4GAEgASgREg0K" + 
          "BWNvbG9yGAIgASgREgwKBHNpemUYAyABKBESDgoGc3RhdHVzGAQgASgRIoMB" + 
          "CgxQQlBva2VyR3JvdXASEAoIcGxheWVySWQYASABKBESLwoFcG9rZXIYAiAD" + 
          "KAsyIC5jb20ub2VnYW1lLmRkei5wcm90b2J1Zi5QQlBva2VyEhEKCXBvY2tl" + 
          "VHlwZRgDIAEoERINCgV0aW1lcxgEIAEoERIOCgZzdGF0dXMYBSABKBEiUAoJ" + 
          "UEJNZXNzYWdlEhAKCHBsYXllcklkGAEgASgREgwKBHR5cGUYAiABKBESDwoH" + 
          "Y29udGVudBgDIAEoDBISCgp0b1BsYXllcklkGAQgASgRIi4KCFBCU3lzdGVt" + 
          "EhAKCGNsaV90aW1lGAEgASgCEhAKCHN2cl90aW1lGAIgASgSQiYKF2NvbS5v" + 
          "ZWdhbWUuZGR6LnByb3RvYnVmQgtQQkRsYW5kbG9yZA==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_com_oegame_ddz_protobuf_PBPlayer__Descriptor = Descriptor.MessageTypes[0];
        internal__static_com_oegame_ddz_protobuf_PBPlayer__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.oegame.ddz.protobuf.PBPlayer, global::com.oegame.ddz.protobuf.PBPlayer.Builder>(internal__static_com_oegame_ddz_protobuf_PBPlayer__Descriptor,
                new string[] { "PlayerId", "Nickname", "Gender", "Avatar", "Gold", "Pour", "Unixtime", "Cards", });
        internal__static_com_oegame_ddz_protobuf_PBError__Descriptor = Descriptor.MessageTypes[1];
        internal__static_com_oegame_ddz_protobuf_PBError__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.oegame.ddz.protobuf.PBError, global::com.oegame.ddz.protobuf.PBError.Builder>(internal__static_com_oegame_ddz_protobuf_PBError__Descriptor,
                new string[] { "Code", "Msg", });
        internal__static_com_oegame_ddz_protobuf_PBRoom__Descriptor = Descriptor.MessageTypes[2];
        internal__static_com_oegame_ddz_protobuf_PBRoom__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.oegame.ddz.protobuf.PBRoom, global::com.oegame.ddz.protobuf.PBRoom.Builder>(internal__static_com_oegame_ddz_protobuf_PBRoom__Descriptor,
                new string[] { "RoomId", "Status", "Loop", "MaxLoop", "Seat", "BeginTime", "BaseScore", "SysTime", "RandomDz", });
        internal__static_com_oegame_ddz_protobuf_PBSeat__Descriptor = Descriptor.MessageTypes[3];
        internal__static_com_oegame_ddz_protobuf_PBSeat__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.oegame.ddz.protobuf.PBSeat, global::com.oegame.ddz.protobuf.PBSeat.Builder>(internal__static_com_oegame_ddz_protobuf_PBSeat__Descriptor,
                new string[] { "PlayerId", "Nickname", "Avatar", "Gender", "Gold", "Poker", "Pos", "IsBanker", "Winner", "Pour", "Dissolve", "Earnings", "BottomPour", "Status", "SystemTime", "POKerCount", "Deposit", "Playahand", "Readly", });
        internal__static_com_oegame_ddz_protobuf_PBPoker__Descriptor = Descriptor.MessageTypes[4];
        internal__static_com_oegame_ddz_protobuf_PBPoker__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.oegame.ddz.protobuf.PBPoker, global::com.oegame.ddz.protobuf.PBPoker.Builder>(internal__static_com_oegame_ddz_protobuf_PBPoker__Descriptor,
                new string[] { "Index", "Color", "Size", "Status", });
        internal__static_com_oegame_ddz_protobuf_PBPokerGroup__Descriptor = Descriptor.MessageTypes[5];
        internal__static_com_oegame_ddz_protobuf_PBPokerGroup__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.oegame.ddz.protobuf.PBPokerGroup, global::com.oegame.ddz.protobuf.PBPokerGroup.Builder>(internal__static_com_oegame_ddz_protobuf_PBPokerGroup__Descriptor,
                new string[] { "PlayerId", "Poker", "PockeType", "Times", "Status", });
        internal__static_com_oegame_ddz_protobuf_PBMessage__Descriptor = Descriptor.MessageTypes[6];
        internal__static_com_oegame_ddz_protobuf_PBMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.oegame.ddz.protobuf.PBMessage, global::com.oegame.ddz.protobuf.PBMessage.Builder>(internal__static_com_oegame_ddz_protobuf_PBMessage__Descriptor,
                new string[] { "PlayerId", "Type", "Content", "ToPlayerId", });
        internal__static_com_oegame_ddz_protobuf_PBSystem__Descriptor = Descriptor.MessageTypes[7];
        internal__static_com_oegame_ddz_protobuf_PBSystem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.oegame.ddz.protobuf.PBSystem, global::com.oegame.ddz.protobuf.PBSystem.Builder>(internal__static_com_oegame_ddz_protobuf_PBSystem__Descriptor,
                new string[] { "CliTime", "SvrTime", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBPlayer : pb::GeneratedMessage<PBPlayer, PBPlayer.Builder> {
    private PBPlayer() { }
    private static readonly PBPlayer defaultInstance = new PBPlayer().MakeReadOnly();
    private static readonly string[] _pBPlayerFieldNames = new string[] { "avatar", "cards", "gender", "gold", "nickname", "playerId", "pour", "unixtime" };
    private static readonly uint[] _pBPlayerFieldTags = new uint[] { 34, 64, 24, 40, 18, 8, 48, 56 };
    public static PBPlayer DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBPlayer DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBPlayer ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.oegame.ddz.protobuf.PbDdz.internal__static_com_oegame_ddz_protobuf_PBPlayer__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBPlayer, PBPlayer.Builder> InternalFieldAccessors {
      get { return global::com.oegame.ddz.protobuf.PbDdz.internal__static_com_oegame_ddz_protobuf_PBPlayer__FieldAccessorTable; }
    }
    
    public const int PlayerIdFieldNumber = 1;
    private bool hasPlayerId;
    private int playerId_;
    public bool HasPlayerId {
      get { return hasPlayerId; }
    }
    public int PlayerId {
      get { return playerId_; }
    }
    
    public const int NicknameFieldNumber = 2;
    private bool hasNickname;
    private string nickname_ = "";
    public bool HasNickname {
      get { return hasNickname; }
    }
    public string Nickname {
      get { return nickname_; }
    }
    
    public const int GenderFieldNumber = 3;
    private bool hasGender;
    private int gender_;
    public bool HasGender {
      get { return hasGender; }
    }
    public int Gender {
      get { return gender_; }
    }
    
    public const int AvatarFieldNumber = 4;
    private bool hasAvatar;
    private string avatar_ = "";
    public bool HasAvatar {
      get { return hasAvatar; }
    }
    public string Avatar {
      get { return avatar_; }
    }
    
    public const int GoldFieldNumber = 5;
    private bool hasGold;
    private int gold_;
    public bool HasGold {
      get { return hasGold; }
    }
    public int Gold {
      get { return gold_; }
    }
    
    public const int PourFieldNumber = 6;
    private bool hasPour;
    private int pour_;
    public bool HasPour {
      get { return hasPour; }
    }
    public int Pour {
      get { return pour_; }
    }
    
    public const int UnixtimeFieldNumber = 7;
    private bool hasUnixtime;
    private long unixtime_;
    public bool HasUnixtime {
      get { return hasUnixtime; }
    }
    public long Unixtime {
      get { return unixtime_; }
    }
    
    public const int CardsFieldNumber = 8;
    private bool hasCards;
    private int cards_;
    public bool HasCards {
      get { return hasCards; }
    }
    public int Cards {
      get { return cards_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBPlayerFieldNames;
      if (hasPlayerId) {
        output.WriteSInt32(1, field_names[5], PlayerId);
      }
      if (hasNickname) {
        output.WriteString(2, field_names[4], Nickname);
      }
      if (hasGender) {
        output.WriteSInt32(3, field_names[2], Gender);
      }
      if (hasAvatar) {
        output.WriteString(4, field_names[0], Avatar);
      }
      if (hasGold) {
        output.WriteSInt32(5, field_names[3], Gold);
      }
      if (hasPour) {
        output.WriteSInt32(6, field_names[6], Pour);
      }
      if (hasUnixtime) {
        output.WriteSInt64(7, field_names[7], Unixtime);
      }
      if (hasCards) {
        output.WriteSInt32(8, field_names[1], Cards);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPlayerId) {
          size += pb::CodedOutputStream.ComputeSInt32Size(1, PlayerId);
        }
        if (hasNickname) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Nickname);
        }
        if (hasGender) {
          size += pb::CodedOutputStream.ComputeSInt32Size(3, Gender);
        }
        if (hasAvatar) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Avatar);
        }
        if (hasGold) {
          size += pb::CodedOutputStream.ComputeSInt32Size(5, Gold);
        }
        if (hasPour) {
          size += pb::CodedOutputStream.ComputeSInt32Size(6, Pour);
        }
        if (hasUnixtime) {
          size += pb::CodedOutputStream.ComputeSInt64Size(7, Unixtime);
        }
        if (hasCards) {
          size += pb::CodedOutputStream.ComputeSInt32Size(8, Cards);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBPlayer ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBPlayer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBPlayer ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBPlayer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBPlayer ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBPlayer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBPlayer ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBPlayer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBPlayer ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBPlayer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBPlayer MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBPlayer prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBPlayer, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBPlayer cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBPlayer result;
      
      private PBPlayer PrepareBuilder() {
        if (resultIsReadOnly) {
          PBPlayer original = result;
          result = new PBPlayer();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBPlayer MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.oegame.ddz.protobuf.PBPlayer.Descriptor; }
      }
      
      public override PBPlayer DefaultInstanceForType {
        get { return global::com.oegame.ddz.protobuf.PBPlayer.DefaultInstance; }
      }
      
      public override PBPlayer BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBPlayer) {
          return MergeFrom((PBPlayer) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBPlayer other) {
        if (other == global::com.oegame.ddz.protobuf.PBPlayer.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayerId) {
          PlayerId = other.PlayerId;
        }
        if (other.HasNickname) {
          Nickname = other.Nickname;
        }
        if (other.HasGender) {
          Gender = other.Gender;
        }
        if (other.HasAvatar) {
          Avatar = other.Avatar;
        }
        if (other.HasGold) {
          Gold = other.Gold;
        }
        if (other.HasPour) {
          Pour = other.Pour;
        }
        if (other.HasUnixtime) {
          Unixtime = other.Unixtime;
        }
        if (other.HasCards) {
          Cards = other.Cards;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBPlayerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBPlayerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPlayerId = input.ReadSInt32(ref result.playerId_);
              break;
            }
            case 18: {
              result.hasNickname = input.ReadString(ref result.nickname_);
              break;
            }
            case 24: {
              result.hasGender = input.ReadSInt32(ref result.gender_);
              break;
            }
            case 34: {
              result.hasAvatar = input.ReadString(ref result.avatar_);
              break;
            }
            case 40: {
              result.hasGold = input.ReadSInt32(ref result.gold_);
              break;
            }
            case 48: {
              result.hasPour = input.ReadSInt32(ref result.pour_);
              break;
            }
            case 56: {
              result.hasUnixtime = input.ReadSInt64(ref result.unixtime_);
              break;
            }
            case 64: {
              result.hasCards = input.ReadSInt32(ref result.cards_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayerId {
        get { return result.hasPlayerId; }
      }
      public int PlayerId {
        get { return result.PlayerId; }
        set { SetPlayerId(value); }
      }
      public Builder SetPlayerId(int value) {
        PrepareBuilder();
        result.hasPlayerId = true;
        result.playerId_ = value;
        return this;
      }
      public Builder ClearPlayerId() {
        PrepareBuilder();
        result.hasPlayerId = false;
        result.playerId_ = 0;
        return this;
      }
      
      public bool HasNickname {
        get { return result.hasNickname; }
      }
      public string Nickname {
        get { return result.Nickname; }
        set { SetNickname(value); }
      }
      public Builder SetNickname(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNickname = true;
        result.nickname_ = value;
        return this;
      }
      public Builder ClearNickname() {
        PrepareBuilder();
        result.hasNickname = false;
        result.nickname_ = "";
        return this;
      }
      
      public bool HasGender {
        get { return result.hasGender; }
      }
      public int Gender {
        get { return result.Gender; }
        set { SetGender(value); }
      }
      public Builder SetGender(int value) {
        PrepareBuilder();
        result.hasGender = true;
        result.gender_ = value;
        return this;
      }
      public Builder ClearGender() {
        PrepareBuilder();
        result.hasGender = false;
        result.gender_ = 0;
        return this;
      }
      
      public bool HasAvatar {
        get { return result.hasAvatar; }
      }
      public string Avatar {
        get { return result.Avatar; }
        set { SetAvatar(value); }
      }
      public Builder SetAvatar(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAvatar = true;
        result.avatar_ = value;
        return this;
      }
      public Builder ClearAvatar() {
        PrepareBuilder();
        result.hasAvatar = false;
        result.avatar_ = "";
        return this;
      }
      
      public bool HasGold {
        get { return result.hasGold; }
      }
      public int Gold {
        get { return result.Gold; }
        set { SetGold(value); }
      }
      public Builder SetGold(int value) {
        PrepareBuilder();
        result.hasGold = true;
        result.gold_ = value;
        return this;
      }
      public Builder ClearGold() {
        PrepareBuilder();
        result.hasGold = false;
        result.gold_ = 0;
        return this;
      }
      
      public bool HasPour {
        get { return result.hasPour; }
      }
      public int Pour {
        get { return result.Pour; }
        set { SetPour(value); }
      }
      public Builder SetPour(int value) {
        PrepareBuilder();
        result.hasPour = true;
        result.pour_ = value;
        return this;
      }
      public Builder ClearPour() {
        PrepareBuilder();
        result.hasPour = false;
        result.pour_ = 0;
        return this;
      }
      
      public bool HasUnixtime {
        get { return result.hasUnixtime; }
      }
      public long Unixtime {
        get { return result.Unixtime; }
        set { SetUnixtime(value); }
      }
      public Builder SetUnixtime(long value) {
        PrepareBuilder();
        result.hasUnixtime = true;
        result.unixtime_ = value;
        return this;
      }
      public Builder ClearUnixtime() {
        PrepareBuilder();
        result.hasUnixtime = false;
        result.unixtime_ = 0;
        return this;
      }
      
      public bool HasCards {
        get { return result.hasCards; }
      }
      public int Cards {
        get { return result.Cards; }
        set { SetCards(value); }
      }
      public Builder SetCards(int value) {
        PrepareBuilder();
        result.hasCards = true;
        result.cards_ = value;
        return this;
      }
      public Builder ClearCards() {
        PrepareBuilder();
        result.hasCards = false;
        result.cards_ = 0;
        return this;
      }
    }
    static PBPlayer() {
      object.ReferenceEquals(global::com.oegame.ddz.protobuf.PbDdz.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBError : pb::GeneratedMessage<PBError, PBError.Builder> {
    private PBError() { }
    private static readonly PBError defaultInstance = new PBError().MakeReadOnly();
    private static readonly string[] _pBErrorFieldNames = new string[] { "code", "msg" };
    private static readonly uint[] _pBErrorFieldTags = new uint[] { 8, 18 };
    public static PBError DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBError DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBError ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.oegame.ddz.protobuf.PbDdz.internal__static_com_oegame_ddz_protobuf_PBError__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBError, PBError.Builder> InternalFieldAccessors {
      get { return global::com.oegame.ddz.protobuf.PbDdz.internal__static_com_oegame_ddz_protobuf_PBError__FieldAccessorTable; }
    }
    
    public const int CodeFieldNumber = 1;
    private bool hasCode;
    private int code_;
    public bool HasCode {
      get { return hasCode; }
    }
    public int Code {
      get { return code_; }
    }
    
    public const int MsgFieldNumber = 2;
    private bool hasMsg;
    private string msg_ = "";
    public bool HasMsg {
      get { return hasMsg; }
    }
    public string Msg {
      get { return msg_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBErrorFieldNames;
      if (hasCode) {
        output.WriteSInt32(1, field_names[0], Code);
      }
      if (hasMsg) {
        output.WriteString(2, field_names[1], Msg);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCode) {
          size += pb::CodedOutputStream.ComputeSInt32Size(1, Code);
        }
        if (hasMsg) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Msg);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBError ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBError ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBError ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBError ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBError ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBError ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBError ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBError ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBError ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBError ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBError MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBError prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBError, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBError cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBError result;
      
      private PBError PrepareBuilder() {
        if (resultIsReadOnly) {
          PBError original = result;
          result = new PBError();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBError MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.oegame.ddz.protobuf.PBError.Descriptor; }
      }
      
      public override PBError DefaultInstanceForType {
        get { return global::com.oegame.ddz.protobuf.PBError.DefaultInstance; }
      }
      
      public override PBError BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBError) {
          return MergeFrom((PBError) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBError other) {
        if (other == global::com.oegame.ddz.protobuf.PBError.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCode) {
          Code = other.Code;
        }
        if (other.HasMsg) {
          Msg = other.Msg;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBErrorFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBErrorFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCode = input.ReadSInt32(ref result.code_);
              break;
            }
            case 18: {
              result.hasMsg = input.ReadString(ref result.msg_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCode {
        get { return result.hasCode; }
      }
      public int Code {
        get { return result.Code; }
        set { SetCode(value); }
      }
      public Builder SetCode(int value) {
        PrepareBuilder();
        result.hasCode = true;
        result.code_ = value;
        return this;
      }
      public Builder ClearCode() {
        PrepareBuilder();
        result.hasCode = false;
        result.code_ = 0;
        return this;
      }
      
      public bool HasMsg {
        get { return result.hasMsg; }
      }
      public string Msg {
        get { return result.Msg; }
        set { SetMsg(value); }
      }
      public Builder SetMsg(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMsg = true;
        result.msg_ = value;
        return this;
      }
      public Builder ClearMsg() {
        PrepareBuilder();
        result.hasMsg = false;
        result.msg_ = "";
        return this;
      }
    }
    static PBError() {
      object.ReferenceEquals(global::com.oegame.ddz.protobuf.PbDdz.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBRoom : pb::GeneratedMessage<PBRoom, PBRoom.Builder> {
    private PBRoom() { }
    private static readonly PBRoom defaultInstance = new PBRoom().MakeReadOnly();
    private static readonly string[] _pBRoomFieldNames = new string[] { "baseScore", "beginTime", "loop", "maxLoop", "random_dz", "roomId", "seat", "status", "sysTime" };
    private static readonly uint[] _pBRoomFieldTags = new uint[] { 56, 48, 24, 32, 72, 8, 42, 16, 64 };
    public static PBRoom DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBRoom DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBRoom ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.oegame.ddz.protobuf.PbDdz.internal__static_com_oegame_ddz_protobuf_PBRoom__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBRoom, PBRoom.Builder> InternalFieldAccessors {
      get { return global::com.oegame.ddz.protobuf.PbDdz.internal__static_com_oegame_ddz_protobuf_PBRoom__FieldAccessorTable; }
    }
    
    public const int RoomIdFieldNumber = 1;
    private bool hasRoomId;
    private int roomId_;
    public bool HasRoomId {
      get { return hasRoomId; }
    }
    public int RoomId {
      get { return roomId_; }
    }
    
    public const int StatusFieldNumber = 2;
    private bool hasStatus;
    private int status_;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public int Status {
      get { return status_; }
    }
    
    public const int LoopFieldNumber = 3;
    private bool hasLoop;
    private int loop_;
    public bool HasLoop {
      get { return hasLoop; }
    }
    public int Loop {
      get { return loop_; }
    }
    
    public const int MaxLoopFieldNumber = 4;
    private bool hasMaxLoop;
    private int maxLoop_;
    public bool HasMaxLoop {
      get { return hasMaxLoop; }
    }
    public int MaxLoop {
      get { return maxLoop_; }
    }
    
    public const int SeatFieldNumber = 5;
    private pbc::PopsicleList<global::com.oegame.ddz.protobuf.PBSeat> seat_ = new pbc::PopsicleList<global::com.oegame.ddz.protobuf.PBSeat>();
    public scg::IList<global::com.oegame.ddz.protobuf.PBSeat> SeatList {
      get { return seat_; }
    }
    public int SeatCount {
      get { return seat_.Count; }
    }
    public global::com.oegame.ddz.protobuf.PBSeat GetSeat(int index) {
      return seat_[index];
    }
    
    public const int BeginTimeFieldNumber = 6;
    private bool hasBeginTime;
    private long beginTime_;
    public bool HasBeginTime {
      get { return hasBeginTime; }
    }
    public long BeginTime {
      get { return beginTime_; }
    }
    
    public const int BaseScoreFieldNumber = 7;
    private bool hasBaseScore;
    private int baseScore_;
    public bool HasBaseScore {
      get { return hasBaseScore; }
    }
    public int BaseScore {
      get { return baseScore_; }
    }
    
    public const int SysTimeFieldNumber = 8;
    private bool hasSysTime;
    private long sysTime_;
    public bool HasSysTime {
      get { return hasSysTime; }
    }
    public long SysTime {
      get { return sysTime_; }
    }
    
    public const int RandomDzFieldNumber = 9;
    private bool hasRandomDz;
    private int randomDz_;
    public bool HasRandomDz {
      get { return hasRandomDz; }
    }
    public int RandomDz {
      get { return randomDz_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBRoomFieldNames;
      if (hasRoomId) {
        output.WriteSInt32(1, field_names[5], RoomId);
      }
      if (hasStatus) {
        output.WriteSInt32(2, field_names[7], Status);
      }
      if (hasLoop) {
        output.WriteSInt32(3, field_names[2], Loop);
      }
      if (hasMaxLoop) {
        output.WriteSInt32(4, field_names[3], MaxLoop);
      }
      if (seat_.Count > 0) {
        output.WriteMessageArray(5, field_names[6], seat_);
      }
      if (hasBeginTime) {
        output.WriteSInt64(6, field_names[1], BeginTime);
      }
      if (hasBaseScore) {
        output.WriteSInt32(7, field_names[0], BaseScore);
      }
      if (hasSysTime) {
        output.WriteSInt64(8, field_names[8], SysTime);
      }
      if (hasRandomDz) {
        output.WriteSInt32(9, field_names[4], RandomDz);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasRoomId) {
          size += pb::CodedOutputStream.ComputeSInt32Size(1, RoomId);
        }
        if (hasStatus) {
          size += pb::CodedOutputStream.ComputeSInt32Size(2, Status);
        }
        if (hasLoop) {
          size += pb::CodedOutputStream.ComputeSInt32Size(3, Loop);
        }
        if (hasMaxLoop) {
          size += pb::CodedOutputStream.ComputeSInt32Size(4, MaxLoop);
        }
        foreach (global::com.oegame.ddz.protobuf.PBSeat element in SeatList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        if (hasBeginTime) {
          size += pb::CodedOutputStream.ComputeSInt64Size(6, BeginTime);
        }
        if (hasBaseScore) {
          size += pb::CodedOutputStream.ComputeSInt32Size(7, BaseScore);
        }
        if (hasSysTime) {
          size += pb::CodedOutputStream.ComputeSInt64Size(8, SysTime);
        }
        if (hasRandomDz) {
          size += pb::CodedOutputStream.ComputeSInt32Size(9, RandomDz);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBRoom ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBRoom ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBRoom ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBRoom ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBRoom ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBRoom ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBRoom ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBRoom ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBRoom ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBRoom ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBRoom MakeReadOnly() {
      seat_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBRoom prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBRoom, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBRoom cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBRoom result;
      
      private PBRoom PrepareBuilder() {
        if (resultIsReadOnly) {
          PBRoom original = result;
          result = new PBRoom();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBRoom MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.oegame.ddz.protobuf.PBRoom.Descriptor; }
      }
      
      public override PBRoom DefaultInstanceForType {
        get { return global::com.oegame.ddz.protobuf.PBRoom.DefaultInstance; }
      }
      
      public override PBRoom BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBRoom) {
          return MergeFrom((PBRoom) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBRoom other) {
        if (other == global::com.oegame.ddz.protobuf.PBRoom.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRoomId) {
          RoomId = other.RoomId;
        }
        if (other.HasStatus) {
          Status = other.Status;
        }
        if (other.HasLoop) {
          Loop = other.Loop;
        }
        if (other.HasMaxLoop) {
          MaxLoop = other.MaxLoop;
        }
        if (other.seat_.Count != 0) {
          result.seat_.Add(other.seat_);
        }
        if (other.HasBeginTime) {
          BeginTime = other.BeginTime;
        }
        if (other.HasBaseScore) {
          BaseScore = other.BaseScore;
        }
        if (other.HasSysTime) {
          SysTime = other.SysTime;
        }
        if (other.HasRandomDz) {
          RandomDz = other.RandomDz;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBRoomFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBRoomFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRoomId = input.ReadSInt32(ref result.roomId_);
              break;
            }
            case 16: {
              result.hasStatus = input.ReadSInt32(ref result.status_);
              break;
            }
            case 24: {
              result.hasLoop = input.ReadSInt32(ref result.loop_);
              break;
            }
            case 32: {
              result.hasMaxLoop = input.ReadSInt32(ref result.maxLoop_);
              break;
            }
            case 42: {
              input.ReadMessageArray(tag, field_name, result.seat_, global::com.oegame.ddz.protobuf.PBSeat.DefaultInstance, extensionRegistry);
              break;
            }
            case 48: {
              result.hasBeginTime = input.ReadSInt64(ref result.beginTime_);
              break;
            }
            case 56: {
              result.hasBaseScore = input.ReadSInt32(ref result.baseScore_);
              break;
            }
            case 64: {
              result.hasSysTime = input.ReadSInt64(ref result.sysTime_);
              break;
            }
            case 72: {
              result.hasRandomDz = input.ReadSInt32(ref result.randomDz_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRoomId {
        get { return result.hasRoomId; }
      }
      public int RoomId {
        get { return result.RoomId; }
        set { SetRoomId(value); }
      }
      public Builder SetRoomId(int value) {
        PrepareBuilder();
        result.hasRoomId = true;
        result.roomId_ = value;
        return this;
      }
      public Builder ClearRoomId() {
        PrepareBuilder();
        result.hasRoomId = false;
        result.roomId_ = 0;
        return this;
      }
      
      public bool HasStatus {
        get { return result.hasStatus; }
      }
      public int Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(int value) {
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = 0;
        return this;
      }
      
      public bool HasLoop {
        get { return result.hasLoop; }
      }
      public int Loop {
        get { return result.Loop; }
        set { SetLoop(value); }
      }
      public Builder SetLoop(int value) {
        PrepareBuilder();
        result.hasLoop = true;
        result.loop_ = value;
        return this;
      }
      public Builder ClearLoop() {
        PrepareBuilder();
        result.hasLoop = false;
        result.loop_ = 0;
        return this;
      }
      
      public bool HasMaxLoop {
        get { return result.hasMaxLoop; }
      }
      public int MaxLoop {
        get { return result.MaxLoop; }
        set { SetMaxLoop(value); }
      }
      public Builder SetMaxLoop(int value) {
        PrepareBuilder();
        result.hasMaxLoop = true;
        result.maxLoop_ = value;
        return this;
      }
      public Builder ClearMaxLoop() {
        PrepareBuilder();
        result.hasMaxLoop = false;
        result.maxLoop_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.oegame.ddz.protobuf.PBSeat> SeatList {
        get { return PrepareBuilder().seat_; }
      }
      public int SeatCount {
        get { return result.SeatCount; }
      }
      public global::com.oegame.ddz.protobuf.PBSeat GetSeat(int index) {
        return result.GetSeat(index);
      }
      public Builder SetSeat(int index, global::com.oegame.ddz.protobuf.PBSeat value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.seat_[index] = value;
        return this;
      }
      public Builder SetSeat(int index, global::com.oegame.ddz.protobuf.PBSeat.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.seat_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSeat(global::com.oegame.ddz.protobuf.PBSeat value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.seat_.Add(value);
        return this;
      }
      public Builder AddSeat(global::com.oegame.ddz.protobuf.PBSeat.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.seat_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSeat(scg::IEnumerable<global::com.oegame.ddz.protobuf.PBSeat> values) {
        PrepareBuilder();
        result.seat_.Add(values);
        return this;
      }
      public Builder ClearSeat() {
        PrepareBuilder();
        result.seat_.Clear();
        return this;
      }
      
      public bool HasBeginTime {
        get { return result.hasBeginTime; }
      }
      public long BeginTime {
        get { return result.BeginTime; }
        set { SetBeginTime(value); }
      }
      public Builder SetBeginTime(long value) {
        PrepareBuilder();
        result.hasBeginTime = true;
        result.beginTime_ = value;
        return this;
      }
      public Builder ClearBeginTime() {
        PrepareBuilder();
        result.hasBeginTime = false;
        result.beginTime_ = 0;
        return this;
      }
      
      public bool HasBaseScore {
        get { return result.hasBaseScore; }
      }
      public int BaseScore {
        get { return result.BaseScore; }
        set { SetBaseScore(value); }
      }
      public Builder SetBaseScore(int value) {
        PrepareBuilder();
        result.hasBaseScore = true;
        result.baseScore_ = value;
        return this;
      }
      public Builder ClearBaseScore() {
        PrepareBuilder();
        result.hasBaseScore = false;
        result.baseScore_ = 0;
        return this;
      }
      
      public bool HasSysTime {
        get { return result.hasSysTime; }
      }
      public long SysTime {
        get { return result.SysTime; }
        set { SetSysTime(value); }
      }
      public Builder SetSysTime(long value) {
        PrepareBuilder();
        result.hasSysTime = true;
        result.sysTime_ = value;
        return this;
      }
      public Builder ClearSysTime() {
        PrepareBuilder();
        result.hasSysTime = false;
        result.sysTime_ = 0;
        return this;
      }
      
      public bool HasRandomDz {
        get { return result.hasRandomDz; }
      }
      public int RandomDz {
        get { return result.RandomDz; }
        set { SetRandomDz(value); }
      }
      public Builder SetRandomDz(int value) {
        PrepareBuilder();
        result.hasRandomDz = true;
        result.randomDz_ = value;
        return this;
      }
      public Builder ClearRandomDz() {
        PrepareBuilder();
        result.hasRandomDz = false;
        result.randomDz_ = 0;
        return this;
      }
    }
    static PBRoom() {
      object.ReferenceEquals(global::com.oegame.ddz.protobuf.PbDdz.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBSeat : pb::GeneratedMessage<PBSeat, PBSeat.Builder> {
    private PBSeat() { }
    private static readonly PBSeat defaultInstance = new PBSeat().MakeReadOnly();
    private static readonly string[] _pBSeatFieldNames = new string[] { "POKerCount", "avatar", "bottomPour", "deposit", "dissolve", "earnings", "gender", "gold", "isBanker", "nickname", "playahand", "playerId", "poker", "pos", "pour", "readly", "status", "systemTime", "winner" };
    private static readonly uint[] _pBSeatFieldTags = new uint[] { 128, 26, 104, 136, 88, 96, 32, 40, 64, 18, 144, 8, 50, 56, 80, 152, 112, 120, 72 };
    public static PBSeat DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBSeat DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBSeat ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.oegame.ddz.protobuf.PbDdz.internal__static_com_oegame_ddz_protobuf_PBSeat__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBSeat, PBSeat.Builder> InternalFieldAccessors {
      get { return global::com.oegame.ddz.protobuf.PbDdz.internal__static_com_oegame_ddz_protobuf_PBSeat__FieldAccessorTable; }
    }
    
    public const int PlayerIdFieldNumber = 1;
    private bool hasPlayerId;
    private int playerId_;
    public bool HasPlayerId {
      get { return hasPlayerId; }
    }
    public int PlayerId {
      get { return playerId_; }
    }
    
    public const int NicknameFieldNumber = 2;
    private bool hasNickname;
    private string nickname_ = "";
    public bool HasNickname {
      get { return hasNickname; }
    }
    public string Nickname {
      get { return nickname_; }
    }
    
    public const int AvatarFieldNumber = 3;
    private bool hasAvatar;
    private string avatar_ = "";
    public bool HasAvatar {
      get { return hasAvatar; }
    }
    public string Avatar {
      get { return avatar_; }
    }
    
    public const int GenderFieldNumber = 4;
    private bool hasGender;
    private int gender_;
    public bool HasGender {
      get { return hasGender; }
    }
    public int Gender {
      get { return gender_; }
    }
    
    public const int GoldFieldNumber = 5;
    private bool hasGold;
    private int gold_;
    public bool HasGold {
      get { return hasGold; }
    }
    public int Gold {
      get { return gold_; }
    }
    
    public const int PokerFieldNumber = 6;
    private pbc::PopsicleList<global::com.oegame.ddz.protobuf.PBPoker> poker_ = new pbc::PopsicleList<global::com.oegame.ddz.protobuf.PBPoker>();
    public scg::IList<global::com.oegame.ddz.protobuf.PBPoker> PokerList {
      get { return poker_; }
    }
    public int PokerCount {
      get { return poker_.Count; }
    }
    public global::com.oegame.ddz.protobuf.PBPoker GetPoker(int index) {
      return poker_[index];
    }
    
    public const int PosFieldNumber = 7;
    private bool hasPos;
    private int pos_;
    public bool HasPos {
      get { return hasPos; }
    }
    public int Pos {
      get { return pos_; }
    }
    
    public const int IsBankerFieldNumber = 8;
    private bool hasIsBanker;
    private bool isBanker_;
    public bool HasIsBanker {
      get { return hasIsBanker; }
    }
    public bool IsBanker {
      get { return isBanker_; }
    }
    
    public const int WinnerFieldNumber = 9;
    private bool hasWinner;
    private bool winner_;
    public bool HasWinner {
      get { return hasWinner; }
    }
    public bool Winner {
      get { return winner_; }
    }
    
    public const int PourFieldNumber = 10;
    private bool hasPour;
    private int pour_;
    public bool HasPour {
      get { return hasPour; }
    }
    public int Pour {
      get { return pour_; }
    }
    
    public const int DissolveFieldNumber = 11;
    private bool hasDissolve;
    private int dissolve_;
    public bool HasDissolve {
      get { return hasDissolve; }
    }
    public int Dissolve {
      get { return dissolve_; }
    }
    
    public const int EarningsFieldNumber = 12;
    private bool hasEarnings;
    private int earnings_;
    public bool HasEarnings {
      get { return hasEarnings; }
    }
    public int Earnings {
      get { return earnings_; }
    }
    
    public const int BottomPourFieldNumber = 13;
    private bool hasBottomPour;
    private int bottomPour_;
    public bool HasBottomPour {
      get { return hasBottomPour; }
    }
    public int BottomPour {
      get { return bottomPour_; }
    }
    
    public const int StatusFieldNumber = 14;
    private bool hasStatus;
    private bool status_;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public bool Status {
      get { return status_; }
    }
    
    public const int SystemTimeFieldNumber = 15;
    private bool hasSystemTime;
    private long systemTime_;
    public bool HasSystemTime {
      get { return hasSystemTime; }
    }
    public long SystemTime {
      get { return systemTime_; }
    }
    
    public const int POKerCountFieldNumber = 16;
    private bool hasPOKerCount;
    private int pOKerCount_;
    public bool HasPOKerCount {
      get { return hasPOKerCount; }
    }
    public int POKerCount {
      get { return pOKerCount_; }
    }
    
    public const int DepositFieldNumber = 17;
    private bool hasDeposit;
    private bool deposit_;
    public bool HasDeposit {
      get { return hasDeposit; }
    }
    public bool Deposit {
      get { return deposit_; }
    }
    
    public const int PlayahandFieldNumber = 18;
    private bool hasPlayahand;
    private bool playahand_;
    public bool HasPlayahand {
      get { return hasPlayahand; }
    }
    public bool Playahand {
      get { return playahand_; }
    }
    
    public const int ReadlyFieldNumber = 19;
    private bool hasReadly;
    private bool readly_;
    public bool HasReadly {
      get { return hasReadly; }
    }
    public bool Readly {
      get { return readly_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBSeatFieldNames;
      if (hasPlayerId) {
        output.WriteSInt32(1, field_names[11], PlayerId);
      }
      if (hasNickname) {
        output.WriteString(2, field_names[9], Nickname);
      }
      if (hasAvatar) {
        output.WriteString(3, field_names[1], Avatar);
      }
      if (hasGender) {
        output.WriteSInt32(4, field_names[6], Gender);
      }
      if (hasGold) {
        output.WriteSInt32(5, field_names[7], Gold);
      }
      if (poker_.Count > 0) {
        output.WriteMessageArray(6, field_names[12], poker_);
      }
      if (hasPos) {
        output.WriteSInt32(7, field_names[13], Pos);
      }
      if (hasIsBanker) {
        output.WriteBool(8, field_names[8], IsBanker);
      }
      if (hasWinner) {
        output.WriteBool(9, field_names[18], Winner);
      }
      if (hasPour) {
        output.WriteSInt32(10, field_names[14], Pour);
      }
      if (hasDissolve) {
        output.WriteSInt32(11, field_names[4], Dissolve);
      }
      if (hasEarnings) {
        output.WriteSInt32(12, field_names[5], Earnings);
      }
      if (hasBottomPour) {
        output.WriteSInt32(13, field_names[2], BottomPour);
      }
      if (hasStatus) {
        output.WriteBool(14, field_names[16], Status);
      }
      if (hasSystemTime) {
        output.WriteSInt64(15, field_names[17], SystemTime);
      }
      if (hasPOKerCount) {
        output.WriteSInt32(16, field_names[0], POKerCount);
      }
      if (hasDeposit) {
        output.WriteBool(17, field_names[3], Deposit);
      }
      if (hasPlayahand) {
        output.WriteBool(18, field_names[10], Playahand);
      }
      if (hasReadly) {
        output.WriteBool(19, field_names[15], Readly);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPlayerId) {
          size += pb::CodedOutputStream.ComputeSInt32Size(1, PlayerId);
        }
        if (hasNickname) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Nickname);
        }
        if (hasAvatar) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Avatar);
        }
        if (hasGender) {
          size += pb::CodedOutputStream.ComputeSInt32Size(4, Gender);
        }
        if (hasGold) {
          size += pb::CodedOutputStream.ComputeSInt32Size(5, Gold);
        }
        foreach (global::com.oegame.ddz.protobuf.PBPoker element in PokerList) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, element);
        }
        if (hasPos) {
          size += pb::CodedOutputStream.ComputeSInt32Size(7, Pos);
        }
        if (hasIsBanker) {
          size += pb::CodedOutputStream.ComputeBoolSize(8, IsBanker);
        }
        if (hasWinner) {
          size += pb::CodedOutputStream.ComputeBoolSize(9, Winner);
        }
        if (hasPour) {
          size += pb::CodedOutputStream.ComputeSInt32Size(10, Pour);
        }
        if (hasDissolve) {
          size += pb::CodedOutputStream.ComputeSInt32Size(11, Dissolve);
        }
        if (hasEarnings) {
          size += pb::CodedOutputStream.ComputeSInt32Size(12, Earnings);
        }
        if (hasBottomPour) {
          size += pb::CodedOutputStream.ComputeSInt32Size(13, BottomPour);
        }
        if (hasStatus) {
          size += pb::CodedOutputStream.ComputeBoolSize(14, Status);
        }
        if (hasSystemTime) {
          size += pb::CodedOutputStream.ComputeSInt64Size(15, SystemTime);
        }
        if (hasPOKerCount) {
          size += pb::CodedOutputStream.ComputeSInt32Size(16, POKerCount);
        }
        if (hasDeposit) {
          size += pb::CodedOutputStream.ComputeBoolSize(17, Deposit);
        }
        if (hasPlayahand) {
          size += pb::CodedOutputStream.ComputeBoolSize(18, Playahand);
        }
        if (hasReadly) {
          size += pb::CodedOutputStream.ComputeBoolSize(19, Readly);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBSeat ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBSeat ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBSeat ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBSeat ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBSeat ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBSeat ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBSeat ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBSeat ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBSeat ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBSeat ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBSeat MakeReadOnly() {
      poker_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBSeat prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBSeat, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBSeat cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBSeat result;
      
      private PBSeat PrepareBuilder() {
        if (resultIsReadOnly) {
          PBSeat original = result;
          result = new PBSeat();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBSeat MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.oegame.ddz.protobuf.PBSeat.Descriptor; }
      }
      
      public override PBSeat DefaultInstanceForType {
        get { return global::com.oegame.ddz.protobuf.PBSeat.DefaultInstance; }
      }
      
      public override PBSeat BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBSeat) {
          return MergeFrom((PBSeat) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBSeat other) {
        if (other == global::com.oegame.ddz.protobuf.PBSeat.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayerId) {
          PlayerId = other.PlayerId;
        }
        if (other.HasNickname) {
          Nickname = other.Nickname;
        }
        if (other.HasAvatar) {
          Avatar = other.Avatar;
        }
        if (other.HasGender) {
          Gender = other.Gender;
        }
        if (other.HasGold) {
          Gold = other.Gold;
        }
        if (other.poker_.Count != 0) {
          result.poker_.Add(other.poker_);
        }
        if (other.HasPos) {
          Pos = other.Pos;
        }
        if (other.HasIsBanker) {
          IsBanker = other.IsBanker;
        }
        if (other.HasWinner) {
          Winner = other.Winner;
        }
        if (other.HasPour) {
          Pour = other.Pour;
        }
        if (other.HasDissolve) {
          Dissolve = other.Dissolve;
        }
        if (other.HasEarnings) {
          Earnings = other.Earnings;
        }
        if (other.HasBottomPour) {
          BottomPour = other.BottomPour;
        }
        if (other.HasStatus) {
          Status = other.Status;
        }
        if (other.HasSystemTime) {
          SystemTime = other.SystemTime;
        }
        if (other.HasPOKerCount) {
          POKerCount = other.POKerCount;
        }
        if (other.HasDeposit) {
          Deposit = other.Deposit;
        }
        if (other.HasPlayahand) {
          Playahand = other.Playahand;
        }
        if (other.HasReadly) {
          Readly = other.Readly;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBSeatFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBSeatFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPlayerId = input.ReadSInt32(ref result.playerId_);
              break;
            }
            case 18: {
              result.hasNickname = input.ReadString(ref result.nickname_);
              break;
            }
            case 26: {
              result.hasAvatar = input.ReadString(ref result.avatar_);
              break;
            }
            case 32: {
              result.hasGender = input.ReadSInt32(ref result.gender_);
              break;
            }
            case 40: {
              result.hasGold = input.ReadSInt32(ref result.gold_);
              break;
            }
            case 50: {
              input.ReadMessageArray(tag, field_name, result.poker_, global::com.oegame.ddz.protobuf.PBPoker.DefaultInstance, extensionRegistry);
              break;
            }
            case 56: {
              result.hasPos = input.ReadSInt32(ref result.pos_);
              break;
            }
            case 64: {
              result.hasIsBanker = input.ReadBool(ref result.isBanker_);
              break;
            }
            case 72: {
              result.hasWinner = input.ReadBool(ref result.winner_);
              break;
            }
            case 80: {
              result.hasPour = input.ReadSInt32(ref result.pour_);
              break;
            }
            case 88: {
              result.hasDissolve = input.ReadSInt32(ref result.dissolve_);
              break;
            }
            case 96: {
              result.hasEarnings = input.ReadSInt32(ref result.earnings_);
              break;
            }
            case 104: {
              result.hasBottomPour = input.ReadSInt32(ref result.bottomPour_);
              break;
            }
            case 112: {
              result.hasStatus = input.ReadBool(ref result.status_);
              break;
            }
            case 120: {
              result.hasSystemTime = input.ReadSInt64(ref result.systemTime_);
              break;
            }
            case 128: {
              result.hasPOKerCount = input.ReadSInt32(ref result.pOKerCount_);
              break;
            }
            case 136: {
              result.hasDeposit = input.ReadBool(ref result.deposit_);
              break;
            }
            case 144: {
              result.hasPlayahand = input.ReadBool(ref result.playahand_);
              break;
            }
            case 152: {
              result.hasReadly = input.ReadBool(ref result.readly_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayerId {
        get { return result.hasPlayerId; }
      }
      public int PlayerId {
        get { return result.PlayerId; }
        set { SetPlayerId(value); }
      }
      public Builder SetPlayerId(int value) {
        PrepareBuilder();
        result.hasPlayerId = true;
        result.playerId_ = value;
        return this;
      }
      public Builder ClearPlayerId() {
        PrepareBuilder();
        result.hasPlayerId = false;
        result.playerId_ = 0;
        return this;
      }
      
      public bool HasNickname {
        get { return result.hasNickname; }
      }
      public string Nickname {
        get { return result.Nickname; }
        set { SetNickname(value); }
      }
      public Builder SetNickname(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNickname = true;
        result.nickname_ = value;
        return this;
      }
      public Builder ClearNickname() {
        PrepareBuilder();
        result.hasNickname = false;
        result.nickname_ = "";
        return this;
      }
      
      public bool HasAvatar {
        get { return result.hasAvatar; }
      }
      public string Avatar {
        get { return result.Avatar; }
        set { SetAvatar(value); }
      }
      public Builder SetAvatar(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAvatar = true;
        result.avatar_ = value;
        return this;
      }
      public Builder ClearAvatar() {
        PrepareBuilder();
        result.hasAvatar = false;
        result.avatar_ = "";
        return this;
      }
      
      public bool HasGender {
        get { return result.hasGender; }
      }
      public int Gender {
        get { return result.Gender; }
        set { SetGender(value); }
      }
      public Builder SetGender(int value) {
        PrepareBuilder();
        result.hasGender = true;
        result.gender_ = value;
        return this;
      }
      public Builder ClearGender() {
        PrepareBuilder();
        result.hasGender = false;
        result.gender_ = 0;
        return this;
      }
      
      public bool HasGold {
        get { return result.hasGold; }
      }
      public int Gold {
        get { return result.Gold; }
        set { SetGold(value); }
      }
      public Builder SetGold(int value) {
        PrepareBuilder();
        result.hasGold = true;
        result.gold_ = value;
        return this;
      }
      public Builder ClearGold() {
        PrepareBuilder();
        result.hasGold = false;
        result.gold_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.oegame.ddz.protobuf.PBPoker> PokerList {
        get { return PrepareBuilder().poker_; }
      }
      public int PokerCount {
        get { return result.PokerCount; }
      }
      public global::com.oegame.ddz.protobuf.PBPoker GetPoker(int index) {
        return result.GetPoker(index);
      }
      public Builder SetPoker(int index, global::com.oegame.ddz.protobuf.PBPoker value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.poker_[index] = value;
        return this;
      }
      public Builder SetPoker(int index, global::com.oegame.ddz.protobuf.PBPoker.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.poker_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPoker(global::com.oegame.ddz.protobuf.PBPoker value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.poker_.Add(value);
        return this;
      }
      public Builder AddPoker(global::com.oegame.ddz.protobuf.PBPoker.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.poker_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePoker(scg::IEnumerable<global::com.oegame.ddz.protobuf.PBPoker> values) {
        PrepareBuilder();
        result.poker_.Add(values);
        return this;
      }
      public Builder ClearPoker() {
        PrepareBuilder();
        result.poker_.Clear();
        return this;
      }
      
      public bool HasPos {
        get { return result.hasPos; }
      }
      public int Pos {
        get { return result.Pos; }
        set { SetPos(value); }
      }
      public Builder SetPos(int value) {
        PrepareBuilder();
        result.hasPos = true;
        result.pos_ = value;
        return this;
      }
      public Builder ClearPos() {
        PrepareBuilder();
        result.hasPos = false;
        result.pos_ = 0;
        return this;
      }
      
      public bool HasIsBanker {
        get { return result.hasIsBanker; }
      }
      public bool IsBanker {
        get { return result.IsBanker; }
        set { SetIsBanker(value); }
      }
      public Builder SetIsBanker(bool value) {
        PrepareBuilder();
        result.hasIsBanker = true;
        result.isBanker_ = value;
        return this;
      }
      public Builder ClearIsBanker() {
        PrepareBuilder();
        result.hasIsBanker = false;
        result.isBanker_ = false;
        return this;
      }
      
      public bool HasWinner {
        get { return result.hasWinner; }
      }
      public bool Winner {
        get { return result.Winner; }
        set { SetWinner(value); }
      }
      public Builder SetWinner(bool value) {
        PrepareBuilder();
        result.hasWinner = true;
        result.winner_ = value;
        return this;
      }
      public Builder ClearWinner() {
        PrepareBuilder();
        result.hasWinner = false;
        result.winner_ = false;
        return this;
      }
      
      public bool HasPour {
        get { return result.hasPour; }
      }
      public int Pour {
        get { return result.Pour; }
        set { SetPour(value); }
      }
      public Builder SetPour(int value) {
        PrepareBuilder();
        result.hasPour = true;
        result.pour_ = value;
        return this;
      }
      public Builder ClearPour() {
        PrepareBuilder();
        result.hasPour = false;
        result.pour_ = 0;
        return this;
      }
      
      public bool HasDissolve {
        get { return result.hasDissolve; }
      }
      public int Dissolve {
        get { return result.Dissolve; }
        set { SetDissolve(value); }
      }
      public Builder SetDissolve(int value) {
        PrepareBuilder();
        result.hasDissolve = true;
        result.dissolve_ = value;
        return this;
      }
      public Builder ClearDissolve() {
        PrepareBuilder();
        result.hasDissolve = false;
        result.dissolve_ = 0;
        return this;
      }
      
      public bool HasEarnings {
        get { return result.hasEarnings; }
      }
      public int Earnings {
        get { return result.Earnings; }
        set { SetEarnings(value); }
      }
      public Builder SetEarnings(int value) {
        PrepareBuilder();
        result.hasEarnings = true;
        result.earnings_ = value;
        return this;
      }
      public Builder ClearEarnings() {
        PrepareBuilder();
        result.hasEarnings = false;
        result.earnings_ = 0;
        return this;
      }
      
      public bool HasBottomPour {
        get { return result.hasBottomPour; }
      }
      public int BottomPour {
        get { return result.BottomPour; }
        set { SetBottomPour(value); }
      }
      public Builder SetBottomPour(int value) {
        PrepareBuilder();
        result.hasBottomPour = true;
        result.bottomPour_ = value;
        return this;
      }
      public Builder ClearBottomPour() {
        PrepareBuilder();
        result.hasBottomPour = false;
        result.bottomPour_ = 0;
        return this;
      }
      
      public bool HasStatus {
        get { return result.hasStatus; }
      }
      public bool Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(bool value) {
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = false;
        return this;
      }
      
      public bool HasSystemTime {
        get { return result.hasSystemTime; }
      }
      public long SystemTime {
        get { return result.SystemTime; }
        set { SetSystemTime(value); }
      }
      public Builder SetSystemTime(long value) {
        PrepareBuilder();
        result.hasSystemTime = true;
        result.systemTime_ = value;
        return this;
      }
      public Builder ClearSystemTime() {
        PrepareBuilder();
        result.hasSystemTime = false;
        result.systemTime_ = 0;
        return this;
      }
      
      public bool HasPOKerCount {
        get { return result.hasPOKerCount; }
      }
      public int POKerCount {
        get { return result.POKerCount; }
        set { SetPOKerCount(value); }
      }
      public Builder SetPOKerCount(int value) {
        PrepareBuilder();
        result.hasPOKerCount = true;
        result.pOKerCount_ = value;
        return this;
      }
      public Builder ClearPOKerCount() {
        PrepareBuilder();
        result.hasPOKerCount = false;
        result.pOKerCount_ = 0;
        return this;
      }
      
      public bool HasDeposit {
        get { return result.hasDeposit; }
      }
      public bool Deposit {
        get { return result.Deposit; }
        set { SetDeposit(value); }
      }
      public Builder SetDeposit(bool value) {
        PrepareBuilder();
        result.hasDeposit = true;
        result.deposit_ = value;
        return this;
      }
      public Builder ClearDeposit() {
        PrepareBuilder();
        result.hasDeposit = false;
        result.deposit_ = false;
        return this;
      }
      
      public bool HasPlayahand {
        get { return result.hasPlayahand; }
      }
      public bool Playahand {
        get { return result.Playahand; }
        set { SetPlayahand(value); }
      }
      public Builder SetPlayahand(bool value) {
        PrepareBuilder();
        result.hasPlayahand = true;
        result.playahand_ = value;
        return this;
      }
      public Builder ClearPlayahand() {
        PrepareBuilder();
        result.hasPlayahand = false;
        result.playahand_ = false;
        return this;
      }
      
      public bool HasReadly {
        get { return result.hasReadly; }
      }
      public bool Readly {
        get { return result.Readly; }
        set { SetReadly(value); }
      }
      public Builder SetReadly(bool value) {
        PrepareBuilder();
        result.hasReadly = true;
        result.readly_ = value;
        return this;
      }
      public Builder ClearReadly() {
        PrepareBuilder();
        result.hasReadly = false;
        result.readly_ = false;
        return this;
      }
    }
    static PBSeat() {
      object.ReferenceEquals(global::com.oegame.ddz.protobuf.PbDdz.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBPoker : pb::GeneratedMessage<PBPoker, PBPoker.Builder> {
    private PBPoker() { }
    private static readonly PBPoker defaultInstance = new PBPoker().MakeReadOnly();
    private static readonly string[] _pBPokerFieldNames = new string[] { "color", "index", "size", "status" };
    private static readonly uint[] _pBPokerFieldTags = new uint[] { 16, 8, 24, 32 };
    public static PBPoker DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBPoker DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBPoker ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.oegame.ddz.protobuf.PbDdz.internal__static_com_oegame_ddz_protobuf_PBPoker__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBPoker, PBPoker.Builder> InternalFieldAccessors {
      get { return global::com.oegame.ddz.protobuf.PbDdz.internal__static_com_oegame_ddz_protobuf_PBPoker__FieldAccessorTable; }
    }
    
    public const int IndexFieldNumber = 1;
    private bool hasIndex;
    private int index_;
    public bool HasIndex {
      get { return hasIndex; }
    }
    public int Index {
      get { return index_; }
    }
    
    public const int ColorFieldNumber = 2;
    private bool hasColor;
    private int color_;
    public bool HasColor {
      get { return hasColor; }
    }
    public int Color {
      get { return color_; }
    }
    
    public const int SizeFieldNumber = 3;
    private bool hasSize;
    private int size_;
    public bool HasSize {
      get { return hasSize; }
    }
    public int Size {
      get { return size_; }
    }
    
    public const int StatusFieldNumber = 4;
    private bool hasStatus;
    private int status_;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public int Status {
      get { return status_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBPokerFieldNames;
      if (hasIndex) {
        output.WriteSInt32(1, field_names[1], Index);
      }
      if (hasColor) {
        output.WriteSInt32(2, field_names[0], Color);
      }
      if (hasSize) {
        output.WriteSInt32(3, field_names[2], Size);
      }
      if (hasStatus) {
        output.WriteSInt32(4, field_names[3], Status);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasIndex) {
          size += pb::CodedOutputStream.ComputeSInt32Size(1, Index);
        }
        if (hasColor) {
          size += pb::CodedOutputStream.ComputeSInt32Size(2, Color);
        }
        if (hasSize) {
          size += pb::CodedOutputStream.ComputeSInt32Size(3, Size);
        }
        if (hasStatus) {
          size += pb::CodedOutputStream.ComputeSInt32Size(4, Status);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBPoker ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBPoker ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBPoker ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBPoker ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBPoker ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBPoker ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBPoker ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBPoker ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBPoker ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBPoker ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBPoker MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBPoker prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBPoker, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBPoker cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBPoker result;
      
      private PBPoker PrepareBuilder() {
        if (resultIsReadOnly) {
          PBPoker original = result;
          result = new PBPoker();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBPoker MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.oegame.ddz.protobuf.PBPoker.Descriptor; }
      }
      
      public override PBPoker DefaultInstanceForType {
        get { return global::com.oegame.ddz.protobuf.PBPoker.DefaultInstance; }
      }
      
      public override PBPoker BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBPoker) {
          return MergeFrom((PBPoker) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBPoker other) {
        if (other == global::com.oegame.ddz.protobuf.PBPoker.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIndex) {
          Index = other.Index;
        }
        if (other.HasColor) {
          Color = other.Color;
        }
        if (other.HasSize) {
          Size = other.Size;
        }
        if (other.HasStatus) {
          Status = other.Status;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBPokerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBPokerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIndex = input.ReadSInt32(ref result.index_);
              break;
            }
            case 16: {
              result.hasColor = input.ReadSInt32(ref result.color_);
              break;
            }
            case 24: {
              result.hasSize = input.ReadSInt32(ref result.size_);
              break;
            }
            case 32: {
              result.hasStatus = input.ReadSInt32(ref result.status_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIndex {
        get { return result.hasIndex; }
      }
      public int Index {
        get { return result.Index; }
        set { SetIndex(value); }
      }
      public Builder SetIndex(int value) {
        PrepareBuilder();
        result.hasIndex = true;
        result.index_ = value;
        return this;
      }
      public Builder ClearIndex() {
        PrepareBuilder();
        result.hasIndex = false;
        result.index_ = 0;
        return this;
      }
      
      public bool HasColor {
        get { return result.hasColor; }
      }
      public int Color {
        get { return result.Color; }
        set { SetColor(value); }
      }
      public Builder SetColor(int value) {
        PrepareBuilder();
        result.hasColor = true;
        result.color_ = value;
        return this;
      }
      public Builder ClearColor() {
        PrepareBuilder();
        result.hasColor = false;
        result.color_ = 0;
        return this;
      }
      
      public bool HasSize {
        get { return result.hasSize; }
      }
      public int Size {
        get { return result.Size; }
        set { SetSize(value); }
      }
      public Builder SetSize(int value) {
        PrepareBuilder();
        result.hasSize = true;
        result.size_ = value;
        return this;
      }
      public Builder ClearSize() {
        PrepareBuilder();
        result.hasSize = false;
        result.size_ = 0;
        return this;
      }
      
      public bool HasStatus {
        get { return result.hasStatus; }
      }
      public int Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(int value) {
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = 0;
        return this;
      }
    }
    static PBPoker() {
      object.ReferenceEquals(global::com.oegame.ddz.protobuf.PbDdz.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBPokerGroup : pb::GeneratedMessage<PBPokerGroup, PBPokerGroup.Builder> {
    private PBPokerGroup() { }
    private static readonly PBPokerGroup defaultInstance = new PBPokerGroup().MakeReadOnly();
    private static readonly string[] _pBPokerGroupFieldNames = new string[] { "playerId", "pockeType", "poker", "status", "times" };
    private static readonly uint[] _pBPokerGroupFieldTags = new uint[] { 8, 24, 18, 40, 32 };
    public static PBPokerGroup DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBPokerGroup DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBPokerGroup ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.oegame.ddz.protobuf.PbDdz.internal__static_com_oegame_ddz_protobuf_PBPokerGroup__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBPokerGroup, PBPokerGroup.Builder> InternalFieldAccessors {
      get { return global::com.oegame.ddz.protobuf.PbDdz.internal__static_com_oegame_ddz_protobuf_PBPokerGroup__FieldAccessorTable; }
    }
    
    public const int PlayerIdFieldNumber = 1;
    private bool hasPlayerId;
    private int playerId_;
    public bool HasPlayerId {
      get { return hasPlayerId; }
    }
    public int PlayerId {
      get { return playerId_; }
    }
    
    public const int PokerFieldNumber = 2;
    private pbc::PopsicleList<global::com.oegame.ddz.protobuf.PBPoker> poker_ = new pbc::PopsicleList<global::com.oegame.ddz.protobuf.PBPoker>();
    public scg::IList<global::com.oegame.ddz.protobuf.PBPoker> PokerList {
      get { return poker_; }
    }
    public int PokerCount {
      get { return poker_.Count; }
    }
    public global::com.oegame.ddz.protobuf.PBPoker GetPoker(int index) {
      return poker_[index];
    }
    
    public const int PockeTypeFieldNumber = 3;
    private bool hasPockeType;
    private int pockeType_;
    public bool HasPockeType {
      get { return hasPockeType; }
    }
    public int PockeType {
      get { return pockeType_; }
    }
    
    public const int TimesFieldNumber = 4;
    private bool hasTimes;
    private int times_;
    public bool HasTimes {
      get { return hasTimes; }
    }
    public int Times {
      get { return times_; }
    }
    
    public const int StatusFieldNumber = 5;
    private bool hasStatus;
    private int status_;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public int Status {
      get { return status_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBPokerGroupFieldNames;
      if (hasPlayerId) {
        output.WriteSInt32(1, field_names[0], PlayerId);
      }
      if (poker_.Count > 0) {
        output.WriteMessageArray(2, field_names[2], poker_);
      }
      if (hasPockeType) {
        output.WriteSInt32(3, field_names[1], PockeType);
      }
      if (hasTimes) {
        output.WriteSInt32(4, field_names[4], Times);
      }
      if (hasStatus) {
        output.WriteSInt32(5, field_names[3], Status);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPlayerId) {
          size += pb::CodedOutputStream.ComputeSInt32Size(1, PlayerId);
        }
        foreach (global::com.oegame.ddz.protobuf.PBPoker element in PokerList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        if (hasPockeType) {
          size += pb::CodedOutputStream.ComputeSInt32Size(3, PockeType);
        }
        if (hasTimes) {
          size += pb::CodedOutputStream.ComputeSInt32Size(4, Times);
        }
        if (hasStatus) {
          size += pb::CodedOutputStream.ComputeSInt32Size(5, Status);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBPokerGroup ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBPokerGroup ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBPokerGroup ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBPokerGroup ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBPokerGroup ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBPokerGroup ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBPokerGroup ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBPokerGroup ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBPokerGroup ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBPokerGroup ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBPokerGroup MakeReadOnly() {
      poker_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBPokerGroup prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBPokerGroup, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBPokerGroup cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBPokerGroup result;
      
      private PBPokerGroup PrepareBuilder() {
        if (resultIsReadOnly) {
          PBPokerGroup original = result;
          result = new PBPokerGroup();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBPokerGroup MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.oegame.ddz.protobuf.PBPokerGroup.Descriptor; }
      }
      
      public override PBPokerGroup DefaultInstanceForType {
        get { return global::com.oegame.ddz.protobuf.PBPokerGroup.DefaultInstance; }
      }
      
      public override PBPokerGroup BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBPokerGroup) {
          return MergeFrom((PBPokerGroup) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBPokerGroup other) {
        if (other == global::com.oegame.ddz.protobuf.PBPokerGroup.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayerId) {
          PlayerId = other.PlayerId;
        }
        if (other.poker_.Count != 0) {
          result.poker_.Add(other.poker_);
        }
        if (other.HasPockeType) {
          PockeType = other.PockeType;
        }
        if (other.HasTimes) {
          Times = other.Times;
        }
        if (other.HasStatus) {
          Status = other.Status;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBPokerGroupFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBPokerGroupFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPlayerId = input.ReadSInt32(ref result.playerId_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.poker_, global::com.oegame.ddz.protobuf.PBPoker.DefaultInstance, extensionRegistry);
              break;
            }
            case 24: {
              result.hasPockeType = input.ReadSInt32(ref result.pockeType_);
              break;
            }
            case 32: {
              result.hasTimes = input.ReadSInt32(ref result.times_);
              break;
            }
            case 40: {
              result.hasStatus = input.ReadSInt32(ref result.status_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayerId {
        get { return result.hasPlayerId; }
      }
      public int PlayerId {
        get { return result.PlayerId; }
        set { SetPlayerId(value); }
      }
      public Builder SetPlayerId(int value) {
        PrepareBuilder();
        result.hasPlayerId = true;
        result.playerId_ = value;
        return this;
      }
      public Builder ClearPlayerId() {
        PrepareBuilder();
        result.hasPlayerId = false;
        result.playerId_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.oegame.ddz.protobuf.PBPoker> PokerList {
        get { return PrepareBuilder().poker_; }
      }
      public int PokerCount {
        get { return result.PokerCount; }
      }
      public global::com.oegame.ddz.protobuf.PBPoker GetPoker(int index) {
        return result.GetPoker(index);
      }
      public Builder SetPoker(int index, global::com.oegame.ddz.protobuf.PBPoker value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.poker_[index] = value;
        return this;
      }
      public Builder SetPoker(int index, global::com.oegame.ddz.protobuf.PBPoker.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.poker_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPoker(global::com.oegame.ddz.protobuf.PBPoker value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.poker_.Add(value);
        return this;
      }
      public Builder AddPoker(global::com.oegame.ddz.protobuf.PBPoker.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.poker_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePoker(scg::IEnumerable<global::com.oegame.ddz.protobuf.PBPoker> values) {
        PrepareBuilder();
        result.poker_.Add(values);
        return this;
      }
      public Builder ClearPoker() {
        PrepareBuilder();
        result.poker_.Clear();
        return this;
      }
      
      public bool HasPockeType {
        get { return result.hasPockeType; }
      }
      public int PockeType {
        get { return result.PockeType; }
        set { SetPockeType(value); }
      }
      public Builder SetPockeType(int value) {
        PrepareBuilder();
        result.hasPockeType = true;
        result.pockeType_ = value;
        return this;
      }
      public Builder ClearPockeType() {
        PrepareBuilder();
        result.hasPockeType = false;
        result.pockeType_ = 0;
        return this;
      }
      
      public bool HasTimes {
        get { return result.hasTimes; }
      }
      public int Times {
        get { return result.Times; }
        set { SetTimes(value); }
      }
      public Builder SetTimes(int value) {
        PrepareBuilder();
        result.hasTimes = true;
        result.times_ = value;
        return this;
      }
      public Builder ClearTimes() {
        PrepareBuilder();
        result.hasTimes = false;
        result.times_ = 0;
        return this;
      }
      
      public bool HasStatus {
        get { return result.hasStatus; }
      }
      public int Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(int value) {
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = 0;
        return this;
      }
    }
    static PBPokerGroup() {
      object.ReferenceEquals(global::com.oegame.ddz.protobuf.PbDdz.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMessage : pb::GeneratedMessage<PBMessage, PBMessage.Builder> {
    private PBMessage() { }
    private static readonly PBMessage defaultInstance = new PBMessage().MakeReadOnly();
    private static readonly string[] _pBMessageFieldNames = new string[] { "content", "playerId", "toPlayerId", "type" };
    private static readonly uint[] _pBMessageFieldTags = new uint[] { 26, 8, 32, 16 };
    public static PBMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.oegame.ddz.protobuf.PbDdz.internal__static_com_oegame_ddz_protobuf_PBMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBMessage, PBMessage.Builder> InternalFieldAccessors {
      get { return global::com.oegame.ddz.protobuf.PbDdz.internal__static_com_oegame_ddz_protobuf_PBMessage__FieldAccessorTable; }
    }
    
    public const int PlayerIdFieldNumber = 1;
    private bool hasPlayerId;
    private int playerId_;
    public bool HasPlayerId {
      get { return hasPlayerId; }
    }
    public int PlayerId {
      get { return playerId_; }
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int ContentFieldNumber = 3;
    private bool hasContent;
    private pb::ByteString content_ = pb::ByteString.Empty;
    public bool HasContent {
      get { return hasContent; }
    }
    public pb::ByteString Content {
      get { return content_; }
    }
    
    public const int ToPlayerIdFieldNumber = 4;
    private bool hasToPlayerId;
    private int toPlayerId_;
    public bool HasToPlayerId {
      get { return hasToPlayerId; }
    }
    public int ToPlayerId {
      get { return toPlayerId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBMessageFieldNames;
      if (hasPlayerId) {
        output.WriteSInt32(1, field_names[1], PlayerId);
      }
      if (hasType) {
        output.WriteSInt32(2, field_names[3], Type);
      }
      if (hasContent) {
        output.WriteBytes(3, field_names[0], Content);
      }
      if (hasToPlayerId) {
        output.WriteSInt32(4, field_names[2], ToPlayerId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPlayerId) {
          size += pb::CodedOutputStream.ComputeSInt32Size(1, PlayerId);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeSInt32Size(2, Type);
        }
        if (hasContent) {
          size += pb::CodedOutputStream.ComputeBytesSize(3, Content);
        }
        if (hasToPlayerId) {
          size += pb::CodedOutputStream.ComputeSInt32Size(4, ToPlayerId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBMessage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBMessage result;
      
      private PBMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          PBMessage original = result;
          result = new PBMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.oegame.ddz.protobuf.PBMessage.Descriptor; }
      }
      
      public override PBMessage DefaultInstanceForType {
        get { return global::com.oegame.ddz.protobuf.PBMessage.DefaultInstance; }
      }
      
      public override PBMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBMessage) {
          return MergeFrom((PBMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBMessage other) {
        if (other == global::com.oegame.ddz.protobuf.PBMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayerId) {
          PlayerId = other.PlayerId;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasContent) {
          Content = other.Content;
        }
        if (other.HasToPlayerId) {
          ToPlayerId = other.ToPlayerId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPlayerId = input.ReadSInt32(ref result.playerId_);
              break;
            }
            case 16: {
              result.hasType = input.ReadSInt32(ref result.type_);
              break;
            }
            case 26: {
              result.hasContent = input.ReadBytes(ref result.content_);
              break;
            }
            case 32: {
              result.hasToPlayerId = input.ReadSInt32(ref result.toPlayerId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayerId {
        get { return result.hasPlayerId; }
      }
      public int PlayerId {
        get { return result.PlayerId; }
        set { SetPlayerId(value); }
      }
      public Builder SetPlayerId(int value) {
        PrepareBuilder();
        result.hasPlayerId = true;
        result.playerId_ = value;
        return this;
      }
      public Builder ClearPlayerId() {
        PrepareBuilder();
        result.hasPlayerId = false;
        result.playerId_ = 0;
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasContent {
        get { return result.hasContent; }
      }
      public pb::ByteString Content {
        get { return result.Content; }
        set { SetContent(value); }
      }
      public Builder SetContent(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContent = true;
        result.content_ = value;
        return this;
      }
      public Builder ClearContent() {
        PrepareBuilder();
        result.hasContent = false;
        result.content_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasToPlayerId {
        get { return result.hasToPlayerId; }
      }
      public int ToPlayerId {
        get { return result.ToPlayerId; }
        set { SetToPlayerId(value); }
      }
      public Builder SetToPlayerId(int value) {
        PrepareBuilder();
        result.hasToPlayerId = true;
        result.toPlayerId_ = value;
        return this;
      }
      public Builder ClearToPlayerId() {
        PrepareBuilder();
        result.hasToPlayerId = false;
        result.toPlayerId_ = 0;
        return this;
      }
    }
    static PBMessage() {
      object.ReferenceEquals(global::com.oegame.ddz.protobuf.PbDdz.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBSystem : pb::GeneratedMessage<PBSystem, PBSystem.Builder> {
    private PBSystem() { }
    private static readonly PBSystem defaultInstance = new PBSystem().MakeReadOnly();
    private static readonly string[] _pBSystemFieldNames = new string[] { "cli_time", "svr_time" };
    private static readonly uint[] _pBSystemFieldTags = new uint[] { 13, 16 };
    public static PBSystem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBSystem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBSystem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.oegame.ddz.protobuf.PbDdz.internal__static_com_oegame_ddz_protobuf_PBSystem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBSystem, PBSystem.Builder> InternalFieldAccessors {
      get { return global::com.oegame.ddz.protobuf.PbDdz.internal__static_com_oegame_ddz_protobuf_PBSystem__FieldAccessorTable; }
    }
    
    public const int CliTimeFieldNumber = 1;
    private bool hasCliTime;
    private float cliTime_;
    public bool HasCliTime {
      get { return hasCliTime; }
    }
    public float CliTime {
      get { return cliTime_; }
    }
    
    public const int SvrTimeFieldNumber = 2;
    private bool hasSvrTime;
    private long svrTime_;
    public bool HasSvrTime {
      get { return hasSvrTime; }
    }
    public long SvrTime {
      get { return svrTime_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBSystemFieldNames;
      if (hasCliTime) {
        output.WriteFloat(1, field_names[0], CliTime);
      }
      if (hasSvrTime) {
        output.WriteSInt64(2, field_names[1], SvrTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCliTime) {
          size += pb::CodedOutputStream.ComputeFloatSize(1, CliTime);
        }
        if (hasSvrTime) {
          size += pb::CodedOutputStream.ComputeSInt64Size(2, SvrTime);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBSystem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBSystem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBSystem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBSystem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBSystem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBSystem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBSystem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBSystem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBSystem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBSystem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBSystem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBSystem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBSystem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBSystem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBSystem result;
      
      private PBSystem PrepareBuilder() {
        if (resultIsReadOnly) {
          PBSystem original = result;
          result = new PBSystem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBSystem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.oegame.ddz.protobuf.PBSystem.Descriptor; }
      }
      
      public override PBSystem DefaultInstanceForType {
        get { return global::com.oegame.ddz.protobuf.PBSystem.DefaultInstance; }
      }
      
      public override PBSystem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBSystem) {
          return MergeFrom((PBSystem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBSystem other) {
        if (other == global::com.oegame.ddz.protobuf.PBSystem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCliTime) {
          CliTime = other.CliTime;
        }
        if (other.HasSvrTime) {
          SvrTime = other.SvrTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBSystemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBSystemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasCliTime = input.ReadFloat(ref result.cliTime_);
              break;
            }
            case 16: {
              result.hasSvrTime = input.ReadSInt64(ref result.svrTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCliTime {
        get { return result.hasCliTime; }
      }
      public float CliTime {
        get { return result.CliTime; }
        set { SetCliTime(value); }
      }
      public Builder SetCliTime(float value) {
        PrepareBuilder();
        result.hasCliTime = true;
        result.cliTime_ = value;
        return this;
      }
      public Builder ClearCliTime() {
        PrepareBuilder();
        result.hasCliTime = false;
        result.cliTime_ = 0F;
        return this;
      }
      
      public bool HasSvrTime {
        get { return result.hasSvrTime; }
      }
      public long SvrTime {
        get { return result.SvrTime; }
        set { SetSvrTime(value); }
      }
      public Builder SetSvrTime(long value) {
        PrepareBuilder();
        result.hasSvrTime = true;
        result.svrTime_ = value;
        return this;
      }
      public Builder ClearSvrTime() {
        PrepareBuilder();
        result.hasSvrTime = false;
        result.svrTime_ = 0;
        return this;
      }
    }
    static PBSystem() {
      object.ReferenceEquals(global::com.oegame.ddz.protobuf.PbDdz.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
