// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace com.oegame.guandan.protobuf {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class PbConfig {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_com_oegame_guandan_protobuf_PBConf__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.oegame.guandan.protobuf.PBConf, global::com.oegame.guandan.protobuf.PBConf.Builder> internal__static_com_oegame_guandan_protobuf_PBConf__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_oegame_guandan_protobuf_CFItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.oegame.guandan.protobuf.CFItem, global::com.oegame.guandan.protobuf.CFItem.Builder> internal__static_com_oegame_guandan_protobuf_CFItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_oegame_guandan_protobuf_CFLevel__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.oegame.guandan.protobuf.CFLevel, global::com.oegame.guandan.protobuf.CFLevel.Builder> internal__static_com_oegame_guandan_protobuf_CFLevel__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_oegame_guandan_protobuf_CFPet__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.oegame.guandan.protobuf.CFPet, global::com.oegame.guandan.protobuf.CFPet.Builder> internal__static_com_oegame_guandan_protobuf_CFPet__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_oegame_guandan_protobuf_CFResource__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.oegame.guandan.protobuf.CFResource, global::com.oegame.guandan.protobuf.CFResource.Builder> internal__static_com_oegame_guandan_protobuf_CFResource__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_oegame_guandan_protobuf_CFSkill__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.oegame.guandan.protobuf.CFSkill, global::com.oegame.guandan.protobuf.CFSkill.Builder> internal__static_com_oegame_guandan_protobuf_CFSkill__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static PbConfig() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "Cg9wYl9jb25maWcucHJvdG8SG2NvbS5vZWdhbWUuZ3VhbmRhbi5wcm90b2J1" + 
          "ZiKRAgoGUEJDb25mEjEKBGl0ZW0YASADKAsyIy5jb20ub2VnYW1lLmd1YW5k" + 
          "YW4ucHJvdG9idWYuQ0ZJdGVtEjMKBWxldmVsGAIgAygLMiQuY29tLm9lZ2Ft" + 
          "ZS5ndWFuZGFuLnByb3RvYnVmLkNGTGV2ZWwSLwoDcGV0GAMgAygLMiIuY29t" + 
          "Lm9lZ2FtZS5ndWFuZGFuLnByb3RvYnVmLkNGUGV0EjkKCHJlc291cmNlGAQg" + 
          "AygLMicuY29tLm9lZ2FtZS5ndWFuZGFuLnByb3RvYnVmLkNGUmVzb3VyY2US" + 
          "MwoFc2tpbGwYBSADKAsyJC5jb20ub2VnYW1lLmd1YW5kYW4ucHJvdG9idWYu" + 
          "Q0ZTa2lsbCLUAgoGQ0ZJdGVtEgoKAmlkGAEgASgREgwKBHR5cGUYAiABKBES" + 
          "DAoEbmFtZRgDIAEoCRIMCgRkZXNjGAQgASgJEg8KB2Rpc3BsYXkYBSABKBES" + 
          "EAoIcG9zaXRpb24YBiABKBESDwoHZHVyYWJsZRgHIAEoERILCgNmaHAYCCAB" + 
          "KBESCwoDYXRrGAkgASgREgsKA2RlZhgKIAEoERILCgNzcGQYCyABKBESDAoE" + 
          "bHVjaxgMIAEoERILCgN2aXQYDSABKBESCwoDc3RyGA4gASgREgsKA3N0YRgP" + 
          "IAEoERILCgNhZ2kYECABKBESDwoHcmVxdWlyZRgRIAEoCRIOCgZlZmZlY3QY" + 
          "EiABKAkSDQoFc3RhZ2UYEyABKBESDgoGdGFyZ2V0GBQgASgREg4KBmlzYmlu" + 
          "ZBgVIAEoERIMCgRoZWFwGBYgASgREgwKBHNlbGwYFyABKBEiMAoHQ0ZMZXZl" + 
          "bBIKCgJpZBgBIAEoERILCgNleHAYAiABKBESDAoEZGVzYxgDIAEoCSL3AgoF" + 
          "Q0ZQZXQSCgoCaWQYASABKBESDAoEbmFtZRgCIAEoCRIMCgRkZXNjGAMgASgJ" + 
          "Eg8KB2Rpc3BsYXkYBCABKAkSDwoHdXBsZXZlbBgFIAEoERIRCgl2YXJ5bGV2" + 
          "ZWwYBiABKAkSEAoIdXB0YXJnZXQYByABKBESDQoFaGF0Y2gYCCABKBESEQoJ" + 
          "aGF0Y2hpdGVtGAkgASgJEgsKA2xpZhgKIAEoERILCgNhdGsYCyABKBESCwoD" + 
          "ZGVmGAwgASgREgsKA2FnaRgNIAEoERINCgVyYXRpbxgOIAEoCRIJCgFkGA8g" + 
          "ASgREgkKAXMYECABKBESCQoBaBgRIAEoERIJCgFmGBIgASgREg4KBnNraWxs" + 
          "MRgTIAEoERIOCgZza2lsbDIYFCABKBESDgoGc2tpbGwzGBUgASgREg4KBnNr" + 
          "aWxsNBgWIAEoERIOCgZza2lsbDUYFyABKBESDgoGc2tpbGw2GBggASgREg4K" + 
          "BnNraWxsNxgZIAEoESKVAQoKQ0ZSZXNvdXJjZRIKCgJpZBgBIAEoERIMCgRu" + 
          "YW1lGAIgASgJEgwKBHR5cGUYAyABKBESDgoGc3ByaXRlGAQgASgJEg8KB3Rl" + 
          "eHR1cmUYBSABKAkSDgoGcHJlZmFiGAYgASgJEg0KBXNvdW5kGAcgASgJEg0K" + 
          "BXZpZGVvGAggASgJEhAKCG1hdGVyaWFsGAkgASgJImAKB0NGU2tpbGwSCgoC" + 
          "aWQYASABKBESDAoEbmFtZRgCIAEoCRIMCgRkZXNjGAMgASgJEg8KB2lzcmFs" + 
          "bHkYBCABKBESDAoEdHlwZRgFIAEoERIOCgZlZmZlY3QYBiABKAlCJwobY29t" + 
          "Lm9lZ2FtZS5ndWFuZGFuLnByb3RvYnVmQghQQkNvbmZpZw==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_com_oegame_guandan_protobuf_PBConf__Descriptor = Descriptor.MessageTypes[0];
        internal__static_com_oegame_guandan_protobuf_PBConf__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.oegame.guandan.protobuf.PBConf, global::com.oegame.guandan.protobuf.PBConf.Builder>(internal__static_com_oegame_guandan_protobuf_PBConf__Descriptor,
                new string[] { "Item", "Level", "Pet", "Resource", "Skill", });
        internal__static_com_oegame_guandan_protobuf_CFItem__Descriptor = Descriptor.MessageTypes[1];
        internal__static_com_oegame_guandan_protobuf_CFItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.oegame.guandan.protobuf.CFItem, global::com.oegame.guandan.protobuf.CFItem.Builder>(internal__static_com_oegame_guandan_protobuf_CFItem__Descriptor,
                new string[] { "Id", "Type", "Name", "Desc", "Display", "Position", "Durable", "Fhp", "Atk", "Def", "Spd", "Luck", "Vit", "Str", "Sta", "Agi", "Require", "Effect", "Stage", "Target", "Isbind", "Heap", "Sell", });
        internal__static_com_oegame_guandan_protobuf_CFLevel__Descriptor = Descriptor.MessageTypes[2];
        internal__static_com_oegame_guandan_protobuf_CFLevel__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.oegame.guandan.protobuf.CFLevel, global::com.oegame.guandan.protobuf.CFLevel.Builder>(internal__static_com_oegame_guandan_protobuf_CFLevel__Descriptor,
                new string[] { "Id", "Exp", "Desc", });
        internal__static_com_oegame_guandan_protobuf_CFPet__Descriptor = Descriptor.MessageTypes[3];
        internal__static_com_oegame_guandan_protobuf_CFPet__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.oegame.guandan.protobuf.CFPet, global::com.oegame.guandan.protobuf.CFPet.Builder>(internal__static_com_oegame_guandan_protobuf_CFPet__Descriptor,
                new string[] { "Id", "Name", "Desc", "Display", "Uplevel", "Varylevel", "Uptarget", "Hatch", "Hatchitem", "Lif", "Atk", "Def", "Agi", "Ratio", "D", "S", "H", "F", "Skill1", "Skill2", "Skill3", "Skill4", "Skill5", "Skill6", "Skill7", });
        internal__static_com_oegame_guandan_protobuf_CFResource__Descriptor = Descriptor.MessageTypes[4];
        internal__static_com_oegame_guandan_protobuf_CFResource__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.oegame.guandan.protobuf.CFResource, global::com.oegame.guandan.protobuf.CFResource.Builder>(internal__static_com_oegame_guandan_protobuf_CFResource__Descriptor,
                new string[] { "Id", "Name", "Type", "Sprite", "Texture", "Prefab", "Sound", "Video", "Material", });
        internal__static_com_oegame_guandan_protobuf_CFSkill__Descriptor = Descriptor.MessageTypes[5];
        internal__static_com_oegame_guandan_protobuf_CFSkill__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.oegame.guandan.protobuf.CFSkill, global::com.oegame.guandan.protobuf.CFSkill.Builder>(internal__static_com_oegame_guandan_protobuf_CFSkill__Descriptor,
                new string[] { "Id", "Name", "Desc", "Isrally", "Type", "Effect", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBConf : pb::GeneratedMessage<PBConf, PBConf.Builder> {
    private PBConf() { }
    private static readonly PBConf defaultInstance = new PBConf().MakeReadOnly();
    private static readonly string[] _pBConfFieldNames = new string[] { "item", "level", "pet", "resource", "skill" };
    private static readonly uint[] _pBConfFieldTags = new uint[] { 10, 18, 26, 34, 42 };
    public static PBConf DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBConf DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBConf ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.oegame.guandan.protobuf.PbConfig.internal__static_com_oegame_guandan_protobuf_PBConf__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBConf, PBConf.Builder> InternalFieldAccessors {
      get { return global::com.oegame.guandan.protobuf.PbConfig.internal__static_com_oegame_guandan_protobuf_PBConf__FieldAccessorTable; }
    }
    
    public const int ItemFieldNumber = 1;
    private pbc::PopsicleList<global::com.oegame.guandan.protobuf.CFItem> item_ = new pbc::PopsicleList<global::com.oegame.guandan.protobuf.CFItem>();
    public scg::IList<global::com.oegame.guandan.protobuf.CFItem> ItemList {
      get { return item_; }
    }
    public int ItemCount {
      get { return item_.Count; }
    }
    public global::com.oegame.guandan.protobuf.CFItem GetItem(int index) {
      return item_[index];
    }
    
    public const int LevelFieldNumber = 2;
    private pbc::PopsicleList<global::com.oegame.guandan.protobuf.CFLevel> level_ = new pbc::PopsicleList<global::com.oegame.guandan.protobuf.CFLevel>();
    public scg::IList<global::com.oegame.guandan.protobuf.CFLevel> LevelList {
      get { return level_; }
    }
    public int LevelCount {
      get { return level_.Count; }
    }
    public global::com.oegame.guandan.protobuf.CFLevel GetLevel(int index) {
      return level_[index];
    }
    
    public const int PetFieldNumber = 3;
    private pbc::PopsicleList<global::com.oegame.guandan.protobuf.CFPet> pet_ = new pbc::PopsicleList<global::com.oegame.guandan.protobuf.CFPet>();
    public scg::IList<global::com.oegame.guandan.protobuf.CFPet> PetList {
      get { return pet_; }
    }
    public int PetCount {
      get { return pet_.Count; }
    }
    public global::com.oegame.guandan.protobuf.CFPet GetPet(int index) {
      return pet_[index];
    }
    
    public const int ResourceFieldNumber = 4;
    private pbc::PopsicleList<global::com.oegame.guandan.protobuf.CFResource> resource_ = new pbc::PopsicleList<global::com.oegame.guandan.protobuf.CFResource>();
    public scg::IList<global::com.oegame.guandan.protobuf.CFResource> ResourceList {
      get { return resource_; }
    }
    public int ResourceCount {
      get { return resource_.Count; }
    }
    public global::com.oegame.guandan.protobuf.CFResource GetResource(int index) {
      return resource_[index];
    }
    
    public const int SkillFieldNumber = 5;
    private pbc::PopsicleList<global::com.oegame.guandan.protobuf.CFSkill> skill_ = new pbc::PopsicleList<global::com.oegame.guandan.protobuf.CFSkill>();
    public scg::IList<global::com.oegame.guandan.protobuf.CFSkill> SkillList {
      get { return skill_; }
    }
    public int SkillCount {
      get { return skill_.Count; }
    }
    public global::com.oegame.guandan.protobuf.CFSkill GetSkill(int index) {
      return skill_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBConfFieldNames;
      if (item_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], item_);
      }
      if (level_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], level_);
      }
      if (pet_.Count > 0) {
        output.WriteMessageArray(3, field_names[2], pet_);
      }
      if (resource_.Count > 0) {
        output.WriteMessageArray(4, field_names[3], resource_);
      }
      if (skill_.Count > 0) {
        output.WriteMessageArray(5, field_names[4], skill_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::com.oegame.guandan.protobuf.CFItem element in ItemList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        foreach (global::com.oegame.guandan.protobuf.CFLevel element in LevelList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        foreach (global::com.oegame.guandan.protobuf.CFPet element in PetList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        foreach (global::com.oegame.guandan.protobuf.CFResource element in ResourceList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        foreach (global::com.oegame.guandan.protobuf.CFSkill element in SkillList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBConf ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBConf ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBConf ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBConf ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBConf ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBConf ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBConf ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBConf ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBConf ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBConf ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBConf MakeReadOnly() {
      item_.MakeReadOnly();
      level_.MakeReadOnly();
      pet_.MakeReadOnly();
      resource_.MakeReadOnly();
      skill_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBConf prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBConf, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBConf cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBConf result;
      
      private PBConf PrepareBuilder() {
        if (resultIsReadOnly) {
          PBConf original = result;
          result = new PBConf();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBConf MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.oegame.guandan.protobuf.PBConf.Descriptor; }
      }
      
      public override PBConf DefaultInstanceForType {
        get { return global::com.oegame.guandan.protobuf.PBConf.DefaultInstance; }
      }
      
      public override PBConf BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBConf) {
          return MergeFrom((PBConf) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBConf other) {
        if (other == global::com.oegame.guandan.protobuf.PBConf.DefaultInstance) return this;
        PrepareBuilder();
        if (other.item_.Count != 0) {
          result.item_.Add(other.item_);
        }
        if (other.level_.Count != 0) {
          result.level_.Add(other.level_);
        }
        if (other.pet_.Count != 0) {
          result.pet_.Add(other.pet_);
        }
        if (other.resource_.Count != 0) {
          result.resource_.Add(other.resource_);
        }
        if (other.skill_.Count != 0) {
          result.skill_.Add(other.skill_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBConfFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBConfFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.item_, global::com.oegame.guandan.protobuf.CFItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.level_, global::com.oegame.guandan.protobuf.CFLevel.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.pet_, global::com.oegame.guandan.protobuf.CFPet.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.resource_, global::com.oegame.guandan.protobuf.CFResource.DefaultInstance, extensionRegistry);
              break;
            }
            case 42: {
              input.ReadMessageArray(tag, field_name, result.skill_, global::com.oegame.guandan.protobuf.CFSkill.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::com.oegame.guandan.protobuf.CFItem> ItemList {
        get { return PrepareBuilder().item_; }
      }
      public int ItemCount {
        get { return result.ItemCount; }
      }
      public global::com.oegame.guandan.protobuf.CFItem GetItem(int index) {
        return result.GetItem(index);
      }
      public Builder SetItem(int index, global::com.oegame.guandan.protobuf.CFItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.item_[index] = value;
        return this;
      }
      public Builder SetItem(int index, global::com.oegame.guandan.protobuf.CFItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.item_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddItem(global::com.oegame.guandan.protobuf.CFItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.item_.Add(value);
        return this;
      }
      public Builder AddItem(global::com.oegame.guandan.protobuf.CFItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.item_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeItem(scg::IEnumerable<global::com.oegame.guandan.protobuf.CFItem> values) {
        PrepareBuilder();
        result.item_.Add(values);
        return this;
      }
      public Builder ClearItem() {
        PrepareBuilder();
        result.item_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::com.oegame.guandan.protobuf.CFLevel> LevelList {
        get { return PrepareBuilder().level_; }
      }
      public int LevelCount {
        get { return result.LevelCount; }
      }
      public global::com.oegame.guandan.protobuf.CFLevel GetLevel(int index) {
        return result.GetLevel(index);
      }
      public Builder SetLevel(int index, global::com.oegame.guandan.protobuf.CFLevel value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.level_[index] = value;
        return this;
      }
      public Builder SetLevel(int index, global::com.oegame.guandan.protobuf.CFLevel.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.level_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddLevel(global::com.oegame.guandan.protobuf.CFLevel value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.level_.Add(value);
        return this;
      }
      public Builder AddLevel(global::com.oegame.guandan.protobuf.CFLevel.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.level_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeLevel(scg::IEnumerable<global::com.oegame.guandan.protobuf.CFLevel> values) {
        PrepareBuilder();
        result.level_.Add(values);
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.level_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::com.oegame.guandan.protobuf.CFPet> PetList {
        get { return PrepareBuilder().pet_; }
      }
      public int PetCount {
        get { return result.PetCount; }
      }
      public global::com.oegame.guandan.protobuf.CFPet GetPet(int index) {
        return result.GetPet(index);
      }
      public Builder SetPet(int index, global::com.oegame.guandan.protobuf.CFPet value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.pet_[index] = value;
        return this;
      }
      public Builder SetPet(int index, global::com.oegame.guandan.protobuf.CFPet.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.pet_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPet(global::com.oegame.guandan.protobuf.CFPet value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.pet_.Add(value);
        return this;
      }
      public Builder AddPet(global::com.oegame.guandan.protobuf.CFPet.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.pet_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePet(scg::IEnumerable<global::com.oegame.guandan.protobuf.CFPet> values) {
        PrepareBuilder();
        result.pet_.Add(values);
        return this;
      }
      public Builder ClearPet() {
        PrepareBuilder();
        result.pet_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::com.oegame.guandan.protobuf.CFResource> ResourceList {
        get { return PrepareBuilder().resource_; }
      }
      public int ResourceCount {
        get { return result.ResourceCount; }
      }
      public global::com.oegame.guandan.protobuf.CFResource GetResource(int index) {
        return result.GetResource(index);
      }
      public Builder SetResource(int index, global::com.oegame.guandan.protobuf.CFResource value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.resource_[index] = value;
        return this;
      }
      public Builder SetResource(int index, global::com.oegame.guandan.protobuf.CFResource.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.resource_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddResource(global::com.oegame.guandan.protobuf.CFResource value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.resource_.Add(value);
        return this;
      }
      public Builder AddResource(global::com.oegame.guandan.protobuf.CFResource.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.resource_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeResource(scg::IEnumerable<global::com.oegame.guandan.protobuf.CFResource> values) {
        PrepareBuilder();
        result.resource_.Add(values);
        return this;
      }
      public Builder ClearResource() {
        PrepareBuilder();
        result.resource_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::com.oegame.guandan.protobuf.CFSkill> SkillList {
        get { return PrepareBuilder().skill_; }
      }
      public int SkillCount {
        get { return result.SkillCount; }
      }
      public global::com.oegame.guandan.protobuf.CFSkill GetSkill(int index) {
        return result.GetSkill(index);
      }
      public Builder SetSkill(int index, global::com.oegame.guandan.protobuf.CFSkill value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.skill_[index] = value;
        return this;
      }
      public Builder SetSkill(int index, global::com.oegame.guandan.protobuf.CFSkill.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.skill_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSkill(global::com.oegame.guandan.protobuf.CFSkill value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.skill_.Add(value);
        return this;
      }
      public Builder AddSkill(global::com.oegame.guandan.protobuf.CFSkill.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.skill_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSkill(scg::IEnumerable<global::com.oegame.guandan.protobuf.CFSkill> values) {
        PrepareBuilder();
        result.skill_.Add(values);
        return this;
      }
      public Builder ClearSkill() {
        PrepareBuilder();
        result.skill_.Clear();
        return this;
      }
    }
    static PBConf() {
      object.ReferenceEquals(global::com.oegame.guandan.protobuf.PbConfig.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CFItem : pb::GeneratedMessage<CFItem, CFItem.Builder> {
    private CFItem() { }
    private static readonly CFItem defaultInstance = new CFItem().MakeReadOnly();
    private static readonly string[] _cFItemFieldNames = new string[] { "agi", "atk", "def", "desc", "display", "durable", "effect", "fhp", "heap", "id", "isbind", "luck", "name", "position", "require", "sell", "spd", "sta", "stage", "str", "target", "type", "vit" };
    private static readonly uint[] _cFItemFieldTags = new uint[] { 128, 72, 80, 34, 40, 56, 146, 64, 176, 8, 168, 96, 26, 48, 138, 184, 88, 120, 152, 112, 160, 16, 104 };
    public static CFItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CFItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CFItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.oegame.guandan.protobuf.PbConfig.internal__static_com_oegame_guandan_protobuf_CFItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CFItem, CFItem.Builder> InternalFieldAccessors {
      get { return global::com.oegame.guandan.protobuf.PbConfig.internal__static_com_oegame_guandan_protobuf_CFItem__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int NameFieldNumber = 3;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int DescFieldNumber = 4;
    private bool hasDesc;
    private string desc_ = "";
    public bool HasDesc {
      get { return hasDesc; }
    }
    public string Desc {
      get { return desc_; }
    }
    
    public const int DisplayFieldNumber = 5;
    private bool hasDisplay;
    private int display_;
    public bool HasDisplay {
      get { return hasDisplay; }
    }
    public int Display {
      get { return display_; }
    }
    
    public const int PositionFieldNumber = 6;
    private bool hasPosition;
    private int position_;
    public bool HasPosition {
      get { return hasPosition; }
    }
    public int Position {
      get { return position_; }
    }
    
    public const int DurableFieldNumber = 7;
    private bool hasDurable;
    private int durable_;
    public bool HasDurable {
      get { return hasDurable; }
    }
    public int Durable {
      get { return durable_; }
    }
    
    public const int FhpFieldNumber = 8;
    private bool hasFhp;
    private int fhp_;
    public bool HasFhp {
      get { return hasFhp; }
    }
    public int Fhp {
      get { return fhp_; }
    }
    
    public const int AtkFieldNumber = 9;
    private bool hasAtk;
    private int atk_;
    public bool HasAtk {
      get { return hasAtk; }
    }
    public int Atk {
      get { return atk_; }
    }
    
    public const int DefFieldNumber = 10;
    private bool hasDef;
    private int def_;
    public bool HasDef {
      get { return hasDef; }
    }
    public int Def {
      get { return def_; }
    }
    
    public const int SpdFieldNumber = 11;
    private bool hasSpd;
    private int spd_;
    public bool HasSpd {
      get { return hasSpd; }
    }
    public int Spd {
      get { return spd_; }
    }
    
    public const int LuckFieldNumber = 12;
    private bool hasLuck;
    private int luck_;
    public bool HasLuck {
      get { return hasLuck; }
    }
    public int Luck {
      get { return luck_; }
    }
    
    public const int VitFieldNumber = 13;
    private bool hasVit;
    private int vit_;
    public bool HasVit {
      get { return hasVit; }
    }
    public int Vit {
      get { return vit_; }
    }
    
    public const int StrFieldNumber = 14;
    private bool hasStr;
    private int str_;
    public bool HasStr {
      get { return hasStr; }
    }
    public int Str {
      get { return str_; }
    }
    
    public const int StaFieldNumber = 15;
    private bool hasSta;
    private int sta_;
    public bool HasSta {
      get { return hasSta; }
    }
    public int Sta {
      get { return sta_; }
    }
    
    public const int AgiFieldNumber = 16;
    private bool hasAgi;
    private int agi_;
    public bool HasAgi {
      get { return hasAgi; }
    }
    public int Agi {
      get { return agi_; }
    }
    
    public const int RequireFieldNumber = 17;
    private bool hasRequire;
    private string require_ = "";
    public bool HasRequire {
      get { return hasRequire; }
    }
    public string Require {
      get { return require_; }
    }
    
    public const int EffectFieldNumber = 18;
    private bool hasEffect;
    private string effect_ = "";
    public bool HasEffect {
      get { return hasEffect; }
    }
    public string Effect {
      get { return effect_; }
    }
    
    public const int StageFieldNumber = 19;
    private bool hasStage;
    private int stage_;
    public bool HasStage {
      get { return hasStage; }
    }
    public int Stage {
      get { return stage_; }
    }
    
    public const int TargetFieldNumber = 20;
    private bool hasTarget;
    private int target_;
    public bool HasTarget {
      get { return hasTarget; }
    }
    public int Target {
      get { return target_; }
    }
    
    public const int IsbindFieldNumber = 21;
    private bool hasIsbind;
    private int isbind_;
    public bool HasIsbind {
      get { return hasIsbind; }
    }
    public int Isbind {
      get { return isbind_; }
    }
    
    public const int HeapFieldNumber = 22;
    private bool hasHeap;
    private int heap_;
    public bool HasHeap {
      get { return hasHeap; }
    }
    public int Heap {
      get { return heap_; }
    }
    
    public const int SellFieldNumber = 23;
    private bool hasSell;
    private int sell_;
    public bool HasSell {
      get { return hasSell; }
    }
    public int Sell {
      get { return sell_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cFItemFieldNames;
      if (hasId) {
        output.WriteSInt32(1, field_names[9], Id);
      }
      if (hasType) {
        output.WriteSInt32(2, field_names[21], Type);
      }
      if (hasName) {
        output.WriteString(3, field_names[12], Name);
      }
      if (hasDesc) {
        output.WriteString(4, field_names[3], Desc);
      }
      if (hasDisplay) {
        output.WriteSInt32(5, field_names[4], Display);
      }
      if (hasPosition) {
        output.WriteSInt32(6, field_names[13], Position);
      }
      if (hasDurable) {
        output.WriteSInt32(7, field_names[5], Durable);
      }
      if (hasFhp) {
        output.WriteSInt32(8, field_names[7], Fhp);
      }
      if (hasAtk) {
        output.WriteSInt32(9, field_names[1], Atk);
      }
      if (hasDef) {
        output.WriteSInt32(10, field_names[2], Def);
      }
      if (hasSpd) {
        output.WriteSInt32(11, field_names[16], Spd);
      }
      if (hasLuck) {
        output.WriteSInt32(12, field_names[11], Luck);
      }
      if (hasVit) {
        output.WriteSInt32(13, field_names[22], Vit);
      }
      if (hasStr) {
        output.WriteSInt32(14, field_names[19], Str);
      }
      if (hasSta) {
        output.WriteSInt32(15, field_names[17], Sta);
      }
      if (hasAgi) {
        output.WriteSInt32(16, field_names[0], Agi);
      }
      if (hasRequire) {
        output.WriteString(17, field_names[14], Require);
      }
      if (hasEffect) {
        output.WriteString(18, field_names[6], Effect);
      }
      if (hasStage) {
        output.WriteSInt32(19, field_names[18], Stage);
      }
      if (hasTarget) {
        output.WriteSInt32(20, field_names[20], Target);
      }
      if (hasIsbind) {
        output.WriteSInt32(21, field_names[10], Isbind);
      }
      if (hasHeap) {
        output.WriteSInt32(22, field_names[8], Heap);
      }
      if (hasSell) {
        output.WriteSInt32(23, field_names[15], Sell);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeSInt32Size(1, Id);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeSInt32Size(2, Type);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Name);
        }
        if (hasDesc) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Desc);
        }
        if (hasDisplay) {
          size += pb::CodedOutputStream.ComputeSInt32Size(5, Display);
        }
        if (hasPosition) {
          size += pb::CodedOutputStream.ComputeSInt32Size(6, Position);
        }
        if (hasDurable) {
          size += pb::CodedOutputStream.ComputeSInt32Size(7, Durable);
        }
        if (hasFhp) {
          size += pb::CodedOutputStream.ComputeSInt32Size(8, Fhp);
        }
        if (hasAtk) {
          size += pb::CodedOutputStream.ComputeSInt32Size(9, Atk);
        }
        if (hasDef) {
          size += pb::CodedOutputStream.ComputeSInt32Size(10, Def);
        }
        if (hasSpd) {
          size += pb::CodedOutputStream.ComputeSInt32Size(11, Spd);
        }
        if (hasLuck) {
          size += pb::CodedOutputStream.ComputeSInt32Size(12, Luck);
        }
        if (hasVit) {
          size += pb::CodedOutputStream.ComputeSInt32Size(13, Vit);
        }
        if (hasStr) {
          size += pb::CodedOutputStream.ComputeSInt32Size(14, Str);
        }
        if (hasSta) {
          size += pb::CodedOutputStream.ComputeSInt32Size(15, Sta);
        }
        if (hasAgi) {
          size += pb::CodedOutputStream.ComputeSInt32Size(16, Agi);
        }
        if (hasRequire) {
          size += pb::CodedOutputStream.ComputeStringSize(17, Require);
        }
        if (hasEffect) {
          size += pb::CodedOutputStream.ComputeStringSize(18, Effect);
        }
        if (hasStage) {
          size += pb::CodedOutputStream.ComputeSInt32Size(19, Stage);
        }
        if (hasTarget) {
          size += pb::CodedOutputStream.ComputeSInt32Size(20, Target);
        }
        if (hasIsbind) {
          size += pb::CodedOutputStream.ComputeSInt32Size(21, Isbind);
        }
        if (hasHeap) {
          size += pb::CodedOutputStream.ComputeSInt32Size(22, Heap);
        }
        if (hasSell) {
          size += pb::CodedOutputStream.ComputeSInt32Size(23, Sell);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CFItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CFItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CFItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CFItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CFItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CFItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CFItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CFItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CFItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CFItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CFItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CFItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CFItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CFItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CFItem result;
      
      private CFItem PrepareBuilder() {
        if (resultIsReadOnly) {
          CFItem original = result;
          result = new CFItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CFItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.oegame.guandan.protobuf.CFItem.Descriptor; }
      }
      
      public override CFItem DefaultInstanceForType {
        get { return global::com.oegame.guandan.protobuf.CFItem.DefaultInstance; }
      }
      
      public override CFItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CFItem) {
          return MergeFrom((CFItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CFItem other) {
        if (other == global::com.oegame.guandan.protobuf.CFItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasDesc) {
          Desc = other.Desc;
        }
        if (other.HasDisplay) {
          Display = other.Display;
        }
        if (other.HasPosition) {
          Position = other.Position;
        }
        if (other.HasDurable) {
          Durable = other.Durable;
        }
        if (other.HasFhp) {
          Fhp = other.Fhp;
        }
        if (other.HasAtk) {
          Atk = other.Atk;
        }
        if (other.HasDef) {
          Def = other.Def;
        }
        if (other.HasSpd) {
          Spd = other.Spd;
        }
        if (other.HasLuck) {
          Luck = other.Luck;
        }
        if (other.HasVit) {
          Vit = other.Vit;
        }
        if (other.HasStr) {
          Str = other.Str;
        }
        if (other.HasSta) {
          Sta = other.Sta;
        }
        if (other.HasAgi) {
          Agi = other.Agi;
        }
        if (other.HasRequire) {
          Require = other.Require;
        }
        if (other.HasEffect) {
          Effect = other.Effect;
        }
        if (other.HasStage) {
          Stage = other.Stage;
        }
        if (other.HasTarget) {
          Target = other.Target;
        }
        if (other.HasIsbind) {
          Isbind = other.Isbind;
        }
        if (other.HasHeap) {
          Heap = other.Heap;
        }
        if (other.HasSell) {
          Sell = other.Sell;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cFItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cFItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadSInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasType = input.ReadSInt32(ref result.type_);
              break;
            }
            case 26: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 34: {
              result.hasDesc = input.ReadString(ref result.desc_);
              break;
            }
            case 40: {
              result.hasDisplay = input.ReadSInt32(ref result.display_);
              break;
            }
            case 48: {
              result.hasPosition = input.ReadSInt32(ref result.position_);
              break;
            }
            case 56: {
              result.hasDurable = input.ReadSInt32(ref result.durable_);
              break;
            }
            case 64: {
              result.hasFhp = input.ReadSInt32(ref result.fhp_);
              break;
            }
            case 72: {
              result.hasAtk = input.ReadSInt32(ref result.atk_);
              break;
            }
            case 80: {
              result.hasDef = input.ReadSInt32(ref result.def_);
              break;
            }
            case 88: {
              result.hasSpd = input.ReadSInt32(ref result.spd_);
              break;
            }
            case 96: {
              result.hasLuck = input.ReadSInt32(ref result.luck_);
              break;
            }
            case 104: {
              result.hasVit = input.ReadSInt32(ref result.vit_);
              break;
            }
            case 112: {
              result.hasStr = input.ReadSInt32(ref result.str_);
              break;
            }
            case 120: {
              result.hasSta = input.ReadSInt32(ref result.sta_);
              break;
            }
            case 128: {
              result.hasAgi = input.ReadSInt32(ref result.agi_);
              break;
            }
            case 138: {
              result.hasRequire = input.ReadString(ref result.require_);
              break;
            }
            case 146: {
              result.hasEffect = input.ReadString(ref result.effect_);
              break;
            }
            case 152: {
              result.hasStage = input.ReadSInt32(ref result.stage_);
              break;
            }
            case 160: {
              result.hasTarget = input.ReadSInt32(ref result.target_);
              break;
            }
            case 168: {
              result.hasIsbind = input.ReadSInt32(ref result.isbind_);
              break;
            }
            case 176: {
              result.hasHeap = input.ReadSInt32(ref result.heap_);
              break;
            }
            case 184: {
              result.hasSell = input.ReadSInt32(ref result.sell_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasDesc {
        get { return result.hasDesc; }
      }
      public string Desc {
        get { return result.Desc; }
        set { SetDesc(value); }
      }
      public Builder SetDesc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDesc = true;
        result.desc_ = value;
        return this;
      }
      public Builder ClearDesc() {
        PrepareBuilder();
        result.hasDesc = false;
        result.desc_ = "";
        return this;
      }
      
      public bool HasDisplay {
        get { return result.hasDisplay; }
      }
      public int Display {
        get { return result.Display; }
        set { SetDisplay(value); }
      }
      public Builder SetDisplay(int value) {
        PrepareBuilder();
        result.hasDisplay = true;
        result.display_ = value;
        return this;
      }
      public Builder ClearDisplay() {
        PrepareBuilder();
        result.hasDisplay = false;
        result.display_ = 0;
        return this;
      }
      
      public bool HasPosition {
        get { return result.hasPosition; }
      }
      public int Position {
        get { return result.Position; }
        set { SetPosition(value); }
      }
      public Builder SetPosition(int value) {
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = value;
        return this;
      }
      public Builder ClearPosition() {
        PrepareBuilder();
        result.hasPosition = false;
        result.position_ = 0;
        return this;
      }
      
      public bool HasDurable {
        get { return result.hasDurable; }
      }
      public int Durable {
        get { return result.Durable; }
        set { SetDurable(value); }
      }
      public Builder SetDurable(int value) {
        PrepareBuilder();
        result.hasDurable = true;
        result.durable_ = value;
        return this;
      }
      public Builder ClearDurable() {
        PrepareBuilder();
        result.hasDurable = false;
        result.durable_ = 0;
        return this;
      }
      
      public bool HasFhp {
        get { return result.hasFhp; }
      }
      public int Fhp {
        get { return result.Fhp; }
        set { SetFhp(value); }
      }
      public Builder SetFhp(int value) {
        PrepareBuilder();
        result.hasFhp = true;
        result.fhp_ = value;
        return this;
      }
      public Builder ClearFhp() {
        PrepareBuilder();
        result.hasFhp = false;
        result.fhp_ = 0;
        return this;
      }
      
      public bool HasAtk {
        get { return result.hasAtk; }
      }
      public int Atk {
        get { return result.Atk; }
        set { SetAtk(value); }
      }
      public Builder SetAtk(int value) {
        PrepareBuilder();
        result.hasAtk = true;
        result.atk_ = value;
        return this;
      }
      public Builder ClearAtk() {
        PrepareBuilder();
        result.hasAtk = false;
        result.atk_ = 0;
        return this;
      }
      
      public bool HasDef {
        get { return result.hasDef; }
      }
      public int Def {
        get { return result.Def; }
        set { SetDef(value); }
      }
      public Builder SetDef(int value) {
        PrepareBuilder();
        result.hasDef = true;
        result.def_ = value;
        return this;
      }
      public Builder ClearDef() {
        PrepareBuilder();
        result.hasDef = false;
        result.def_ = 0;
        return this;
      }
      
      public bool HasSpd {
        get { return result.hasSpd; }
      }
      public int Spd {
        get { return result.Spd; }
        set { SetSpd(value); }
      }
      public Builder SetSpd(int value) {
        PrepareBuilder();
        result.hasSpd = true;
        result.spd_ = value;
        return this;
      }
      public Builder ClearSpd() {
        PrepareBuilder();
        result.hasSpd = false;
        result.spd_ = 0;
        return this;
      }
      
      public bool HasLuck {
        get { return result.hasLuck; }
      }
      public int Luck {
        get { return result.Luck; }
        set { SetLuck(value); }
      }
      public Builder SetLuck(int value) {
        PrepareBuilder();
        result.hasLuck = true;
        result.luck_ = value;
        return this;
      }
      public Builder ClearLuck() {
        PrepareBuilder();
        result.hasLuck = false;
        result.luck_ = 0;
        return this;
      }
      
      public bool HasVit {
        get { return result.hasVit; }
      }
      public int Vit {
        get { return result.Vit; }
        set { SetVit(value); }
      }
      public Builder SetVit(int value) {
        PrepareBuilder();
        result.hasVit = true;
        result.vit_ = value;
        return this;
      }
      public Builder ClearVit() {
        PrepareBuilder();
        result.hasVit = false;
        result.vit_ = 0;
        return this;
      }
      
      public bool HasStr {
        get { return result.hasStr; }
      }
      public int Str {
        get { return result.Str; }
        set { SetStr(value); }
      }
      public Builder SetStr(int value) {
        PrepareBuilder();
        result.hasStr = true;
        result.str_ = value;
        return this;
      }
      public Builder ClearStr() {
        PrepareBuilder();
        result.hasStr = false;
        result.str_ = 0;
        return this;
      }
      
      public bool HasSta {
        get { return result.hasSta; }
      }
      public int Sta {
        get { return result.Sta; }
        set { SetSta(value); }
      }
      public Builder SetSta(int value) {
        PrepareBuilder();
        result.hasSta = true;
        result.sta_ = value;
        return this;
      }
      public Builder ClearSta() {
        PrepareBuilder();
        result.hasSta = false;
        result.sta_ = 0;
        return this;
      }
      
      public bool HasAgi {
        get { return result.hasAgi; }
      }
      public int Agi {
        get { return result.Agi; }
        set { SetAgi(value); }
      }
      public Builder SetAgi(int value) {
        PrepareBuilder();
        result.hasAgi = true;
        result.agi_ = value;
        return this;
      }
      public Builder ClearAgi() {
        PrepareBuilder();
        result.hasAgi = false;
        result.agi_ = 0;
        return this;
      }
      
      public bool HasRequire {
        get { return result.hasRequire; }
      }
      public string Require {
        get { return result.Require; }
        set { SetRequire(value); }
      }
      public Builder SetRequire(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRequire = true;
        result.require_ = value;
        return this;
      }
      public Builder ClearRequire() {
        PrepareBuilder();
        result.hasRequire = false;
        result.require_ = "";
        return this;
      }
      
      public bool HasEffect {
        get { return result.hasEffect; }
      }
      public string Effect {
        get { return result.Effect; }
        set { SetEffect(value); }
      }
      public Builder SetEffect(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEffect = true;
        result.effect_ = value;
        return this;
      }
      public Builder ClearEffect() {
        PrepareBuilder();
        result.hasEffect = false;
        result.effect_ = "";
        return this;
      }
      
      public bool HasStage {
        get { return result.hasStage; }
      }
      public int Stage {
        get { return result.Stage; }
        set { SetStage(value); }
      }
      public Builder SetStage(int value) {
        PrepareBuilder();
        result.hasStage = true;
        result.stage_ = value;
        return this;
      }
      public Builder ClearStage() {
        PrepareBuilder();
        result.hasStage = false;
        result.stage_ = 0;
        return this;
      }
      
      public bool HasTarget {
        get { return result.hasTarget; }
      }
      public int Target {
        get { return result.Target; }
        set { SetTarget(value); }
      }
      public Builder SetTarget(int value) {
        PrepareBuilder();
        result.hasTarget = true;
        result.target_ = value;
        return this;
      }
      public Builder ClearTarget() {
        PrepareBuilder();
        result.hasTarget = false;
        result.target_ = 0;
        return this;
      }
      
      public bool HasIsbind {
        get { return result.hasIsbind; }
      }
      public int Isbind {
        get { return result.Isbind; }
        set { SetIsbind(value); }
      }
      public Builder SetIsbind(int value) {
        PrepareBuilder();
        result.hasIsbind = true;
        result.isbind_ = value;
        return this;
      }
      public Builder ClearIsbind() {
        PrepareBuilder();
        result.hasIsbind = false;
        result.isbind_ = 0;
        return this;
      }
      
      public bool HasHeap {
        get { return result.hasHeap; }
      }
      public int Heap {
        get { return result.Heap; }
        set { SetHeap(value); }
      }
      public Builder SetHeap(int value) {
        PrepareBuilder();
        result.hasHeap = true;
        result.heap_ = value;
        return this;
      }
      public Builder ClearHeap() {
        PrepareBuilder();
        result.hasHeap = false;
        result.heap_ = 0;
        return this;
      }
      
      public bool HasSell {
        get { return result.hasSell; }
      }
      public int Sell {
        get { return result.Sell; }
        set { SetSell(value); }
      }
      public Builder SetSell(int value) {
        PrepareBuilder();
        result.hasSell = true;
        result.sell_ = value;
        return this;
      }
      public Builder ClearSell() {
        PrepareBuilder();
        result.hasSell = false;
        result.sell_ = 0;
        return this;
      }
    }
    static CFItem() {
      object.ReferenceEquals(global::com.oegame.guandan.protobuf.PbConfig.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CFLevel : pb::GeneratedMessage<CFLevel, CFLevel.Builder> {
    private CFLevel() { }
    private static readonly CFLevel defaultInstance = new CFLevel().MakeReadOnly();
    private static readonly string[] _cFLevelFieldNames = new string[] { "desc", "exp", "id" };
    private static readonly uint[] _cFLevelFieldTags = new uint[] { 26, 16, 8 };
    public static CFLevel DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CFLevel DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CFLevel ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.oegame.guandan.protobuf.PbConfig.internal__static_com_oegame_guandan_protobuf_CFLevel__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CFLevel, CFLevel.Builder> InternalFieldAccessors {
      get { return global::com.oegame.guandan.protobuf.PbConfig.internal__static_com_oegame_guandan_protobuf_CFLevel__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int ExpFieldNumber = 2;
    private bool hasExp;
    private int exp_;
    public bool HasExp {
      get { return hasExp; }
    }
    public int Exp {
      get { return exp_; }
    }
    
    public const int DescFieldNumber = 3;
    private bool hasDesc;
    private string desc_ = "";
    public bool HasDesc {
      get { return hasDesc; }
    }
    public string Desc {
      get { return desc_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cFLevelFieldNames;
      if (hasId) {
        output.WriteSInt32(1, field_names[2], Id);
      }
      if (hasExp) {
        output.WriteSInt32(2, field_names[1], Exp);
      }
      if (hasDesc) {
        output.WriteString(3, field_names[0], Desc);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeSInt32Size(1, Id);
        }
        if (hasExp) {
          size += pb::CodedOutputStream.ComputeSInt32Size(2, Exp);
        }
        if (hasDesc) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Desc);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CFLevel ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CFLevel ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CFLevel ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CFLevel ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CFLevel ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CFLevel ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CFLevel ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CFLevel ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CFLevel ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CFLevel ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CFLevel MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CFLevel prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CFLevel, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CFLevel cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CFLevel result;
      
      private CFLevel PrepareBuilder() {
        if (resultIsReadOnly) {
          CFLevel original = result;
          result = new CFLevel();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CFLevel MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.oegame.guandan.protobuf.CFLevel.Descriptor; }
      }
      
      public override CFLevel DefaultInstanceForType {
        get { return global::com.oegame.guandan.protobuf.CFLevel.DefaultInstance; }
      }
      
      public override CFLevel BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CFLevel) {
          return MergeFrom((CFLevel) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CFLevel other) {
        if (other == global::com.oegame.guandan.protobuf.CFLevel.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasExp) {
          Exp = other.Exp;
        }
        if (other.HasDesc) {
          Desc = other.Desc;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cFLevelFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cFLevelFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadSInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasExp = input.ReadSInt32(ref result.exp_);
              break;
            }
            case 26: {
              result.hasDesc = input.ReadString(ref result.desc_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasExp {
        get { return result.hasExp; }
      }
      public int Exp {
        get { return result.Exp; }
        set { SetExp(value); }
      }
      public Builder SetExp(int value) {
        PrepareBuilder();
        result.hasExp = true;
        result.exp_ = value;
        return this;
      }
      public Builder ClearExp() {
        PrepareBuilder();
        result.hasExp = false;
        result.exp_ = 0;
        return this;
      }
      
      public bool HasDesc {
        get { return result.hasDesc; }
      }
      public string Desc {
        get { return result.Desc; }
        set { SetDesc(value); }
      }
      public Builder SetDesc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDesc = true;
        result.desc_ = value;
        return this;
      }
      public Builder ClearDesc() {
        PrepareBuilder();
        result.hasDesc = false;
        result.desc_ = "";
        return this;
      }
    }
    static CFLevel() {
      object.ReferenceEquals(global::com.oegame.guandan.protobuf.PbConfig.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CFPet : pb::GeneratedMessage<CFPet, CFPet.Builder> {
    private CFPet() { }
    private static readonly CFPet defaultInstance = new CFPet().MakeReadOnly();
    private static readonly string[] _cFPetFieldNames = new string[] { "agi", "atk", "d", "def", "desc", "display", "f", "h", "hatch", "hatchitem", "id", "lif", "name", "ratio", "s", "skill1", "skill2", "skill3", "skill4", "skill5", "skill6", "skill7", "uplevel", "uptarget", "varylevel" };
    private static readonly uint[] _cFPetFieldTags = new uint[] { 104, 88, 120, 96, 26, 34, 144, 136, 64, 74, 8, 80, 18, 114, 128, 152, 160, 168, 176, 184, 192, 200, 40, 56, 50 };
    public static CFPet DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CFPet DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CFPet ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.oegame.guandan.protobuf.PbConfig.internal__static_com_oegame_guandan_protobuf_CFPet__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CFPet, CFPet.Builder> InternalFieldAccessors {
      get { return global::com.oegame.guandan.protobuf.PbConfig.internal__static_com_oegame_guandan_protobuf_CFPet__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int DescFieldNumber = 3;
    private bool hasDesc;
    private string desc_ = "";
    public bool HasDesc {
      get { return hasDesc; }
    }
    public string Desc {
      get { return desc_; }
    }
    
    public const int DisplayFieldNumber = 4;
    private bool hasDisplay;
    private string display_ = "";
    public bool HasDisplay {
      get { return hasDisplay; }
    }
    public string Display {
      get { return display_; }
    }
    
    public const int UplevelFieldNumber = 5;
    private bool hasUplevel;
    private int uplevel_;
    public bool HasUplevel {
      get { return hasUplevel; }
    }
    public int Uplevel {
      get { return uplevel_; }
    }
    
    public const int VarylevelFieldNumber = 6;
    private bool hasVarylevel;
    private string varylevel_ = "";
    public bool HasVarylevel {
      get { return hasVarylevel; }
    }
    public string Varylevel {
      get { return varylevel_; }
    }
    
    public const int UptargetFieldNumber = 7;
    private bool hasUptarget;
    private int uptarget_;
    public bool HasUptarget {
      get { return hasUptarget; }
    }
    public int Uptarget {
      get { return uptarget_; }
    }
    
    public const int HatchFieldNumber = 8;
    private bool hasHatch;
    private int hatch_;
    public bool HasHatch {
      get { return hasHatch; }
    }
    public int Hatch {
      get { return hatch_; }
    }
    
    public const int HatchitemFieldNumber = 9;
    private bool hasHatchitem;
    private string hatchitem_ = "";
    public bool HasHatchitem {
      get { return hasHatchitem; }
    }
    public string Hatchitem {
      get { return hatchitem_; }
    }
    
    public const int LifFieldNumber = 10;
    private bool hasLif;
    private int lif_;
    public bool HasLif {
      get { return hasLif; }
    }
    public int Lif {
      get { return lif_; }
    }
    
    public const int AtkFieldNumber = 11;
    private bool hasAtk;
    private int atk_;
    public bool HasAtk {
      get { return hasAtk; }
    }
    public int Atk {
      get { return atk_; }
    }
    
    public const int DefFieldNumber = 12;
    private bool hasDef;
    private int def_;
    public bool HasDef {
      get { return hasDef; }
    }
    public int Def {
      get { return def_; }
    }
    
    public const int AgiFieldNumber = 13;
    private bool hasAgi;
    private int agi_;
    public bool HasAgi {
      get { return hasAgi; }
    }
    public int Agi {
      get { return agi_; }
    }
    
    public const int RatioFieldNumber = 14;
    private bool hasRatio;
    private string ratio_ = "";
    public bool HasRatio {
      get { return hasRatio; }
    }
    public string Ratio {
      get { return ratio_; }
    }
    
    public const int DFieldNumber = 15;
    private bool hasD;
    private int d_;
    public bool HasD {
      get { return hasD; }
    }
    public int D {
      get { return d_; }
    }
    
    public const int SFieldNumber = 16;
    private bool hasS;
    private int s_;
    public bool HasS {
      get { return hasS; }
    }
    public int S {
      get { return s_; }
    }
    
    public const int HFieldNumber = 17;
    private bool hasH;
    private int h_;
    public bool HasH {
      get { return hasH; }
    }
    public int H {
      get { return h_; }
    }
    
    public const int FFieldNumber = 18;
    private bool hasF;
    private int f_;
    public bool HasF {
      get { return hasF; }
    }
    public int F {
      get { return f_; }
    }
    
    public const int Skill1FieldNumber = 19;
    private bool hasSkill1;
    private int skill1_;
    public bool HasSkill1 {
      get { return hasSkill1; }
    }
    public int Skill1 {
      get { return skill1_; }
    }
    
    public const int Skill2FieldNumber = 20;
    private bool hasSkill2;
    private int skill2_;
    public bool HasSkill2 {
      get { return hasSkill2; }
    }
    public int Skill2 {
      get { return skill2_; }
    }
    
    public const int Skill3FieldNumber = 21;
    private bool hasSkill3;
    private int skill3_;
    public bool HasSkill3 {
      get { return hasSkill3; }
    }
    public int Skill3 {
      get { return skill3_; }
    }
    
    public const int Skill4FieldNumber = 22;
    private bool hasSkill4;
    private int skill4_;
    public bool HasSkill4 {
      get { return hasSkill4; }
    }
    public int Skill4 {
      get { return skill4_; }
    }
    
    public const int Skill5FieldNumber = 23;
    private bool hasSkill5;
    private int skill5_;
    public bool HasSkill5 {
      get { return hasSkill5; }
    }
    public int Skill5 {
      get { return skill5_; }
    }
    
    public const int Skill6FieldNumber = 24;
    private bool hasSkill6;
    private int skill6_;
    public bool HasSkill6 {
      get { return hasSkill6; }
    }
    public int Skill6 {
      get { return skill6_; }
    }
    
    public const int Skill7FieldNumber = 25;
    private bool hasSkill7;
    private int skill7_;
    public bool HasSkill7 {
      get { return hasSkill7; }
    }
    public int Skill7 {
      get { return skill7_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cFPetFieldNames;
      if (hasId) {
        output.WriteSInt32(1, field_names[10], Id);
      }
      if (hasName) {
        output.WriteString(2, field_names[12], Name);
      }
      if (hasDesc) {
        output.WriteString(3, field_names[4], Desc);
      }
      if (hasDisplay) {
        output.WriteString(4, field_names[5], Display);
      }
      if (hasUplevel) {
        output.WriteSInt32(5, field_names[22], Uplevel);
      }
      if (hasVarylevel) {
        output.WriteString(6, field_names[24], Varylevel);
      }
      if (hasUptarget) {
        output.WriteSInt32(7, field_names[23], Uptarget);
      }
      if (hasHatch) {
        output.WriteSInt32(8, field_names[8], Hatch);
      }
      if (hasHatchitem) {
        output.WriteString(9, field_names[9], Hatchitem);
      }
      if (hasLif) {
        output.WriteSInt32(10, field_names[11], Lif);
      }
      if (hasAtk) {
        output.WriteSInt32(11, field_names[1], Atk);
      }
      if (hasDef) {
        output.WriteSInt32(12, field_names[3], Def);
      }
      if (hasAgi) {
        output.WriteSInt32(13, field_names[0], Agi);
      }
      if (hasRatio) {
        output.WriteString(14, field_names[13], Ratio);
      }
      if (hasD) {
        output.WriteSInt32(15, field_names[2], D);
      }
      if (hasS) {
        output.WriteSInt32(16, field_names[14], S);
      }
      if (hasH) {
        output.WriteSInt32(17, field_names[7], H);
      }
      if (hasF) {
        output.WriteSInt32(18, field_names[6], F);
      }
      if (hasSkill1) {
        output.WriteSInt32(19, field_names[15], Skill1);
      }
      if (hasSkill2) {
        output.WriteSInt32(20, field_names[16], Skill2);
      }
      if (hasSkill3) {
        output.WriteSInt32(21, field_names[17], Skill3);
      }
      if (hasSkill4) {
        output.WriteSInt32(22, field_names[18], Skill4);
      }
      if (hasSkill5) {
        output.WriteSInt32(23, field_names[19], Skill5);
      }
      if (hasSkill6) {
        output.WriteSInt32(24, field_names[20], Skill6);
      }
      if (hasSkill7) {
        output.WriteSInt32(25, field_names[21], Skill7);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeSInt32Size(1, Id);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Name);
        }
        if (hasDesc) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Desc);
        }
        if (hasDisplay) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Display);
        }
        if (hasUplevel) {
          size += pb::CodedOutputStream.ComputeSInt32Size(5, Uplevel);
        }
        if (hasVarylevel) {
          size += pb::CodedOutputStream.ComputeStringSize(6, Varylevel);
        }
        if (hasUptarget) {
          size += pb::CodedOutputStream.ComputeSInt32Size(7, Uptarget);
        }
        if (hasHatch) {
          size += pb::CodedOutputStream.ComputeSInt32Size(8, Hatch);
        }
        if (hasHatchitem) {
          size += pb::CodedOutputStream.ComputeStringSize(9, Hatchitem);
        }
        if (hasLif) {
          size += pb::CodedOutputStream.ComputeSInt32Size(10, Lif);
        }
        if (hasAtk) {
          size += pb::CodedOutputStream.ComputeSInt32Size(11, Atk);
        }
        if (hasDef) {
          size += pb::CodedOutputStream.ComputeSInt32Size(12, Def);
        }
        if (hasAgi) {
          size += pb::CodedOutputStream.ComputeSInt32Size(13, Agi);
        }
        if (hasRatio) {
          size += pb::CodedOutputStream.ComputeStringSize(14, Ratio);
        }
        if (hasD) {
          size += pb::CodedOutputStream.ComputeSInt32Size(15, D);
        }
        if (hasS) {
          size += pb::CodedOutputStream.ComputeSInt32Size(16, S);
        }
        if (hasH) {
          size += pb::CodedOutputStream.ComputeSInt32Size(17, H);
        }
        if (hasF) {
          size += pb::CodedOutputStream.ComputeSInt32Size(18, F);
        }
        if (hasSkill1) {
          size += pb::CodedOutputStream.ComputeSInt32Size(19, Skill1);
        }
        if (hasSkill2) {
          size += pb::CodedOutputStream.ComputeSInt32Size(20, Skill2);
        }
        if (hasSkill3) {
          size += pb::CodedOutputStream.ComputeSInt32Size(21, Skill3);
        }
        if (hasSkill4) {
          size += pb::CodedOutputStream.ComputeSInt32Size(22, Skill4);
        }
        if (hasSkill5) {
          size += pb::CodedOutputStream.ComputeSInt32Size(23, Skill5);
        }
        if (hasSkill6) {
          size += pb::CodedOutputStream.ComputeSInt32Size(24, Skill6);
        }
        if (hasSkill7) {
          size += pb::CodedOutputStream.ComputeSInt32Size(25, Skill7);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CFPet ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CFPet ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CFPet ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CFPet ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CFPet ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CFPet ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CFPet ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CFPet ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CFPet ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CFPet ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CFPet MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CFPet prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CFPet, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CFPet cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CFPet result;
      
      private CFPet PrepareBuilder() {
        if (resultIsReadOnly) {
          CFPet original = result;
          result = new CFPet();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CFPet MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.oegame.guandan.protobuf.CFPet.Descriptor; }
      }
      
      public override CFPet DefaultInstanceForType {
        get { return global::com.oegame.guandan.protobuf.CFPet.DefaultInstance; }
      }
      
      public override CFPet BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CFPet) {
          return MergeFrom((CFPet) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CFPet other) {
        if (other == global::com.oegame.guandan.protobuf.CFPet.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasDesc) {
          Desc = other.Desc;
        }
        if (other.HasDisplay) {
          Display = other.Display;
        }
        if (other.HasUplevel) {
          Uplevel = other.Uplevel;
        }
        if (other.HasVarylevel) {
          Varylevel = other.Varylevel;
        }
        if (other.HasUptarget) {
          Uptarget = other.Uptarget;
        }
        if (other.HasHatch) {
          Hatch = other.Hatch;
        }
        if (other.HasHatchitem) {
          Hatchitem = other.Hatchitem;
        }
        if (other.HasLif) {
          Lif = other.Lif;
        }
        if (other.HasAtk) {
          Atk = other.Atk;
        }
        if (other.HasDef) {
          Def = other.Def;
        }
        if (other.HasAgi) {
          Agi = other.Agi;
        }
        if (other.HasRatio) {
          Ratio = other.Ratio;
        }
        if (other.HasD) {
          D = other.D;
        }
        if (other.HasS) {
          S = other.S;
        }
        if (other.HasH) {
          H = other.H;
        }
        if (other.HasF) {
          F = other.F;
        }
        if (other.HasSkill1) {
          Skill1 = other.Skill1;
        }
        if (other.HasSkill2) {
          Skill2 = other.Skill2;
        }
        if (other.HasSkill3) {
          Skill3 = other.Skill3;
        }
        if (other.HasSkill4) {
          Skill4 = other.Skill4;
        }
        if (other.HasSkill5) {
          Skill5 = other.Skill5;
        }
        if (other.HasSkill6) {
          Skill6 = other.Skill6;
        }
        if (other.HasSkill7) {
          Skill7 = other.Skill7;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cFPetFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cFPetFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadSInt32(ref result.id_);
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 26: {
              result.hasDesc = input.ReadString(ref result.desc_);
              break;
            }
            case 34: {
              result.hasDisplay = input.ReadString(ref result.display_);
              break;
            }
            case 40: {
              result.hasUplevel = input.ReadSInt32(ref result.uplevel_);
              break;
            }
            case 50: {
              result.hasVarylevel = input.ReadString(ref result.varylevel_);
              break;
            }
            case 56: {
              result.hasUptarget = input.ReadSInt32(ref result.uptarget_);
              break;
            }
            case 64: {
              result.hasHatch = input.ReadSInt32(ref result.hatch_);
              break;
            }
            case 74: {
              result.hasHatchitem = input.ReadString(ref result.hatchitem_);
              break;
            }
            case 80: {
              result.hasLif = input.ReadSInt32(ref result.lif_);
              break;
            }
            case 88: {
              result.hasAtk = input.ReadSInt32(ref result.atk_);
              break;
            }
            case 96: {
              result.hasDef = input.ReadSInt32(ref result.def_);
              break;
            }
            case 104: {
              result.hasAgi = input.ReadSInt32(ref result.agi_);
              break;
            }
            case 114: {
              result.hasRatio = input.ReadString(ref result.ratio_);
              break;
            }
            case 120: {
              result.hasD = input.ReadSInt32(ref result.d_);
              break;
            }
            case 128: {
              result.hasS = input.ReadSInt32(ref result.s_);
              break;
            }
            case 136: {
              result.hasH = input.ReadSInt32(ref result.h_);
              break;
            }
            case 144: {
              result.hasF = input.ReadSInt32(ref result.f_);
              break;
            }
            case 152: {
              result.hasSkill1 = input.ReadSInt32(ref result.skill1_);
              break;
            }
            case 160: {
              result.hasSkill2 = input.ReadSInt32(ref result.skill2_);
              break;
            }
            case 168: {
              result.hasSkill3 = input.ReadSInt32(ref result.skill3_);
              break;
            }
            case 176: {
              result.hasSkill4 = input.ReadSInt32(ref result.skill4_);
              break;
            }
            case 184: {
              result.hasSkill5 = input.ReadSInt32(ref result.skill5_);
              break;
            }
            case 192: {
              result.hasSkill6 = input.ReadSInt32(ref result.skill6_);
              break;
            }
            case 200: {
              result.hasSkill7 = input.ReadSInt32(ref result.skill7_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasDesc {
        get { return result.hasDesc; }
      }
      public string Desc {
        get { return result.Desc; }
        set { SetDesc(value); }
      }
      public Builder SetDesc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDesc = true;
        result.desc_ = value;
        return this;
      }
      public Builder ClearDesc() {
        PrepareBuilder();
        result.hasDesc = false;
        result.desc_ = "";
        return this;
      }
      
      public bool HasDisplay {
        get { return result.hasDisplay; }
      }
      public string Display {
        get { return result.Display; }
        set { SetDisplay(value); }
      }
      public Builder SetDisplay(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDisplay = true;
        result.display_ = value;
        return this;
      }
      public Builder ClearDisplay() {
        PrepareBuilder();
        result.hasDisplay = false;
        result.display_ = "";
        return this;
      }
      
      public bool HasUplevel {
        get { return result.hasUplevel; }
      }
      public int Uplevel {
        get { return result.Uplevel; }
        set { SetUplevel(value); }
      }
      public Builder SetUplevel(int value) {
        PrepareBuilder();
        result.hasUplevel = true;
        result.uplevel_ = value;
        return this;
      }
      public Builder ClearUplevel() {
        PrepareBuilder();
        result.hasUplevel = false;
        result.uplevel_ = 0;
        return this;
      }
      
      public bool HasVarylevel {
        get { return result.hasVarylevel; }
      }
      public string Varylevel {
        get { return result.Varylevel; }
        set { SetVarylevel(value); }
      }
      public Builder SetVarylevel(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVarylevel = true;
        result.varylevel_ = value;
        return this;
      }
      public Builder ClearVarylevel() {
        PrepareBuilder();
        result.hasVarylevel = false;
        result.varylevel_ = "";
        return this;
      }
      
      public bool HasUptarget {
        get { return result.hasUptarget; }
      }
      public int Uptarget {
        get { return result.Uptarget; }
        set { SetUptarget(value); }
      }
      public Builder SetUptarget(int value) {
        PrepareBuilder();
        result.hasUptarget = true;
        result.uptarget_ = value;
        return this;
      }
      public Builder ClearUptarget() {
        PrepareBuilder();
        result.hasUptarget = false;
        result.uptarget_ = 0;
        return this;
      }
      
      public bool HasHatch {
        get { return result.hasHatch; }
      }
      public int Hatch {
        get { return result.Hatch; }
        set { SetHatch(value); }
      }
      public Builder SetHatch(int value) {
        PrepareBuilder();
        result.hasHatch = true;
        result.hatch_ = value;
        return this;
      }
      public Builder ClearHatch() {
        PrepareBuilder();
        result.hasHatch = false;
        result.hatch_ = 0;
        return this;
      }
      
      public bool HasHatchitem {
        get { return result.hasHatchitem; }
      }
      public string Hatchitem {
        get { return result.Hatchitem; }
        set { SetHatchitem(value); }
      }
      public Builder SetHatchitem(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHatchitem = true;
        result.hatchitem_ = value;
        return this;
      }
      public Builder ClearHatchitem() {
        PrepareBuilder();
        result.hasHatchitem = false;
        result.hatchitem_ = "";
        return this;
      }
      
      public bool HasLif {
        get { return result.hasLif; }
      }
      public int Lif {
        get { return result.Lif; }
        set { SetLif(value); }
      }
      public Builder SetLif(int value) {
        PrepareBuilder();
        result.hasLif = true;
        result.lif_ = value;
        return this;
      }
      public Builder ClearLif() {
        PrepareBuilder();
        result.hasLif = false;
        result.lif_ = 0;
        return this;
      }
      
      public bool HasAtk {
        get { return result.hasAtk; }
      }
      public int Atk {
        get { return result.Atk; }
        set { SetAtk(value); }
      }
      public Builder SetAtk(int value) {
        PrepareBuilder();
        result.hasAtk = true;
        result.atk_ = value;
        return this;
      }
      public Builder ClearAtk() {
        PrepareBuilder();
        result.hasAtk = false;
        result.atk_ = 0;
        return this;
      }
      
      public bool HasDef {
        get { return result.hasDef; }
      }
      public int Def {
        get { return result.Def; }
        set { SetDef(value); }
      }
      public Builder SetDef(int value) {
        PrepareBuilder();
        result.hasDef = true;
        result.def_ = value;
        return this;
      }
      public Builder ClearDef() {
        PrepareBuilder();
        result.hasDef = false;
        result.def_ = 0;
        return this;
      }
      
      public bool HasAgi {
        get { return result.hasAgi; }
      }
      public int Agi {
        get { return result.Agi; }
        set { SetAgi(value); }
      }
      public Builder SetAgi(int value) {
        PrepareBuilder();
        result.hasAgi = true;
        result.agi_ = value;
        return this;
      }
      public Builder ClearAgi() {
        PrepareBuilder();
        result.hasAgi = false;
        result.agi_ = 0;
        return this;
      }
      
      public bool HasRatio {
        get { return result.hasRatio; }
      }
      public string Ratio {
        get { return result.Ratio; }
        set { SetRatio(value); }
      }
      public Builder SetRatio(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRatio = true;
        result.ratio_ = value;
        return this;
      }
      public Builder ClearRatio() {
        PrepareBuilder();
        result.hasRatio = false;
        result.ratio_ = "";
        return this;
      }
      
      public bool HasD {
        get { return result.hasD; }
      }
      public int D {
        get { return result.D; }
        set { SetD(value); }
      }
      public Builder SetD(int value) {
        PrepareBuilder();
        result.hasD = true;
        result.d_ = value;
        return this;
      }
      public Builder ClearD() {
        PrepareBuilder();
        result.hasD = false;
        result.d_ = 0;
        return this;
      }
      
      public bool HasS {
        get { return result.hasS; }
      }
      public int S {
        get { return result.S; }
        set { SetS(value); }
      }
      public Builder SetS(int value) {
        PrepareBuilder();
        result.hasS = true;
        result.s_ = value;
        return this;
      }
      public Builder ClearS() {
        PrepareBuilder();
        result.hasS = false;
        result.s_ = 0;
        return this;
      }
      
      public bool HasH {
        get { return result.hasH; }
      }
      public int H {
        get { return result.H; }
        set { SetH(value); }
      }
      public Builder SetH(int value) {
        PrepareBuilder();
        result.hasH = true;
        result.h_ = value;
        return this;
      }
      public Builder ClearH() {
        PrepareBuilder();
        result.hasH = false;
        result.h_ = 0;
        return this;
      }
      
      public bool HasF {
        get { return result.hasF; }
      }
      public int F {
        get { return result.F; }
        set { SetF(value); }
      }
      public Builder SetF(int value) {
        PrepareBuilder();
        result.hasF = true;
        result.f_ = value;
        return this;
      }
      public Builder ClearF() {
        PrepareBuilder();
        result.hasF = false;
        result.f_ = 0;
        return this;
      }
      
      public bool HasSkill1 {
        get { return result.hasSkill1; }
      }
      public int Skill1 {
        get { return result.Skill1; }
        set { SetSkill1(value); }
      }
      public Builder SetSkill1(int value) {
        PrepareBuilder();
        result.hasSkill1 = true;
        result.skill1_ = value;
        return this;
      }
      public Builder ClearSkill1() {
        PrepareBuilder();
        result.hasSkill1 = false;
        result.skill1_ = 0;
        return this;
      }
      
      public bool HasSkill2 {
        get { return result.hasSkill2; }
      }
      public int Skill2 {
        get { return result.Skill2; }
        set { SetSkill2(value); }
      }
      public Builder SetSkill2(int value) {
        PrepareBuilder();
        result.hasSkill2 = true;
        result.skill2_ = value;
        return this;
      }
      public Builder ClearSkill2() {
        PrepareBuilder();
        result.hasSkill2 = false;
        result.skill2_ = 0;
        return this;
      }
      
      public bool HasSkill3 {
        get { return result.hasSkill3; }
      }
      public int Skill3 {
        get { return result.Skill3; }
        set { SetSkill3(value); }
      }
      public Builder SetSkill3(int value) {
        PrepareBuilder();
        result.hasSkill3 = true;
        result.skill3_ = value;
        return this;
      }
      public Builder ClearSkill3() {
        PrepareBuilder();
        result.hasSkill3 = false;
        result.skill3_ = 0;
        return this;
      }
      
      public bool HasSkill4 {
        get { return result.hasSkill4; }
      }
      public int Skill4 {
        get { return result.Skill4; }
        set { SetSkill4(value); }
      }
      public Builder SetSkill4(int value) {
        PrepareBuilder();
        result.hasSkill4 = true;
        result.skill4_ = value;
        return this;
      }
      public Builder ClearSkill4() {
        PrepareBuilder();
        result.hasSkill4 = false;
        result.skill4_ = 0;
        return this;
      }
      
      public bool HasSkill5 {
        get { return result.hasSkill5; }
      }
      public int Skill5 {
        get { return result.Skill5; }
        set { SetSkill5(value); }
      }
      public Builder SetSkill5(int value) {
        PrepareBuilder();
        result.hasSkill5 = true;
        result.skill5_ = value;
        return this;
      }
      public Builder ClearSkill5() {
        PrepareBuilder();
        result.hasSkill5 = false;
        result.skill5_ = 0;
        return this;
      }
      
      public bool HasSkill6 {
        get { return result.hasSkill6; }
      }
      public int Skill6 {
        get { return result.Skill6; }
        set { SetSkill6(value); }
      }
      public Builder SetSkill6(int value) {
        PrepareBuilder();
        result.hasSkill6 = true;
        result.skill6_ = value;
        return this;
      }
      public Builder ClearSkill6() {
        PrepareBuilder();
        result.hasSkill6 = false;
        result.skill6_ = 0;
        return this;
      }
      
      public bool HasSkill7 {
        get { return result.hasSkill7; }
      }
      public int Skill7 {
        get { return result.Skill7; }
        set { SetSkill7(value); }
      }
      public Builder SetSkill7(int value) {
        PrepareBuilder();
        result.hasSkill7 = true;
        result.skill7_ = value;
        return this;
      }
      public Builder ClearSkill7() {
        PrepareBuilder();
        result.hasSkill7 = false;
        result.skill7_ = 0;
        return this;
      }
    }
    static CFPet() {
      object.ReferenceEquals(global::com.oegame.guandan.protobuf.PbConfig.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CFResource : pb::GeneratedMessage<CFResource, CFResource.Builder> {
    private CFResource() { }
    private static readonly CFResource defaultInstance = new CFResource().MakeReadOnly();
    private static readonly string[] _cFResourceFieldNames = new string[] { "id", "material", "name", "prefab", "sound", "sprite", "texture", "type", "video" };
    private static readonly uint[] _cFResourceFieldTags = new uint[] { 8, 74, 18, 50, 58, 34, 42, 24, 66 };
    public static CFResource DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CFResource DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CFResource ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.oegame.guandan.protobuf.PbConfig.internal__static_com_oegame_guandan_protobuf_CFResource__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CFResource, CFResource.Builder> InternalFieldAccessors {
      get { return global::com.oegame.guandan.protobuf.PbConfig.internal__static_com_oegame_guandan_protobuf_CFResource__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int TypeFieldNumber = 3;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int SpriteFieldNumber = 4;
    private bool hasSprite;
    private string sprite_ = "";
    public bool HasSprite {
      get { return hasSprite; }
    }
    public string Sprite {
      get { return sprite_; }
    }
    
    public const int TextureFieldNumber = 5;
    private bool hasTexture;
    private string texture_ = "";
    public bool HasTexture {
      get { return hasTexture; }
    }
    public string Texture {
      get { return texture_; }
    }
    
    public const int PrefabFieldNumber = 6;
    private bool hasPrefab;
    private string prefab_ = "";
    public bool HasPrefab {
      get { return hasPrefab; }
    }
    public string Prefab {
      get { return prefab_; }
    }
    
    public const int SoundFieldNumber = 7;
    private bool hasSound;
    private string sound_ = "";
    public bool HasSound {
      get { return hasSound; }
    }
    public string Sound {
      get { return sound_; }
    }
    
    public const int VideoFieldNumber = 8;
    private bool hasVideo;
    private string video_ = "";
    public bool HasVideo {
      get { return hasVideo; }
    }
    public string Video {
      get { return video_; }
    }
    
    public const int MaterialFieldNumber = 9;
    private bool hasMaterial;
    private string material_ = "";
    public bool HasMaterial {
      get { return hasMaterial; }
    }
    public string Material {
      get { return material_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cFResourceFieldNames;
      if (hasId) {
        output.WriteSInt32(1, field_names[0], Id);
      }
      if (hasName) {
        output.WriteString(2, field_names[2], Name);
      }
      if (hasType) {
        output.WriteSInt32(3, field_names[7], Type);
      }
      if (hasSprite) {
        output.WriteString(4, field_names[5], Sprite);
      }
      if (hasTexture) {
        output.WriteString(5, field_names[6], Texture);
      }
      if (hasPrefab) {
        output.WriteString(6, field_names[3], Prefab);
      }
      if (hasSound) {
        output.WriteString(7, field_names[4], Sound);
      }
      if (hasVideo) {
        output.WriteString(8, field_names[8], Video);
      }
      if (hasMaterial) {
        output.WriteString(9, field_names[1], Material);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeSInt32Size(1, Id);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Name);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeSInt32Size(3, Type);
        }
        if (hasSprite) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Sprite);
        }
        if (hasTexture) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Texture);
        }
        if (hasPrefab) {
          size += pb::CodedOutputStream.ComputeStringSize(6, Prefab);
        }
        if (hasSound) {
          size += pb::CodedOutputStream.ComputeStringSize(7, Sound);
        }
        if (hasVideo) {
          size += pb::CodedOutputStream.ComputeStringSize(8, Video);
        }
        if (hasMaterial) {
          size += pb::CodedOutputStream.ComputeStringSize(9, Material);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CFResource ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CFResource ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CFResource ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CFResource ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CFResource ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CFResource ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CFResource ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CFResource ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CFResource ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CFResource ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CFResource MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CFResource prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CFResource, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CFResource cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CFResource result;
      
      private CFResource PrepareBuilder() {
        if (resultIsReadOnly) {
          CFResource original = result;
          result = new CFResource();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CFResource MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.oegame.guandan.protobuf.CFResource.Descriptor; }
      }
      
      public override CFResource DefaultInstanceForType {
        get { return global::com.oegame.guandan.protobuf.CFResource.DefaultInstance; }
      }
      
      public override CFResource BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CFResource) {
          return MergeFrom((CFResource) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CFResource other) {
        if (other == global::com.oegame.guandan.protobuf.CFResource.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasSprite) {
          Sprite = other.Sprite;
        }
        if (other.HasTexture) {
          Texture = other.Texture;
        }
        if (other.HasPrefab) {
          Prefab = other.Prefab;
        }
        if (other.HasSound) {
          Sound = other.Sound;
        }
        if (other.HasVideo) {
          Video = other.Video;
        }
        if (other.HasMaterial) {
          Material = other.Material;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cFResourceFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cFResourceFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadSInt32(ref result.id_);
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 24: {
              result.hasType = input.ReadSInt32(ref result.type_);
              break;
            }
            case 34: {
              result.hasSprite = input.ReadString(ref result.sprite_);
              break;
            }
            case 42: {
              result.hasTexture = input.ReadString(ref result.texture_);
              break;
            }
            case 50: {
              result.hasPrefab = input.ReadString(ref result.prefab_);
              break;
            }
            case 58: {
              result.hasSound = input.ReadString(ref result.sound_);
              break;
            }
            case 66: {
              result.hasVideo = input.ReadString(ref result.video_);
              break;
            }
            case 74: {
              result.hasMaterial = input.ReadString(ref result.material_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasSprite {
        get { return result.hasSprite; }
      }
      public string Sprite {
        get { return result.Sprite; }
        set { SetSprite(value); }
      }
      public Builder SetSprite(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSprite = true;
        result.sprite_ = value;
        return this;
      }
      public Builder ClearSprite() {
        PrepareBuilder();
        result.hasSprite = false;
        result.sprite_ = "";
        return this;
      }
      
      public bool HasTexture {
        get { return result.hasTexture; }
      }
      public string Texture {
        get { return result.Texture; }
        set { SetTexture(value); }
      }
      public Builder SetTexture(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTexture = true;
        result.texture_ = value;
        return this;
      }
      public Builder ClearTexture() {
        PrepareBuilder();
        result.hasTexture = false;
        result.texture_ = "";
        return this;
      }
      
      public bool HasPrefab {
        get { return result.hasPrefab; }
      }
      public string Prefab {
        get { return result.Prefab; }
        set { SetPrefab(value); }
      }
      public Builder SetPrefab(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPrefab = true;
        result.prefab_ = value;
        return this;
      }
      public Builder ClearPrefab() {
        PrepareBuilder();
        result.hasPrefab = false;
        result.prefab_ = "";
        return this;
      }
      
      public bool HasSound {
        get { return result.hasSound; }
      }
      public string Sound {
        get { return result.Sound; }
        set { SetSound(value); }
      }
      public Builder SetSound(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSound = true;
        result.sound_ = value;
        return this;
      }
      public Builder ClearSound() {
        PrepareBuilder();
        result.hasSound = false;
        result.sound_ = "";
        return this;
      }
      
      public bool HasVideo {
        get { return result.hasVideo; }
      }
      public string Video {
        get { return result.Video; }
        set { SetVideo(value); }
      }
      public Builder SetVideo(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVideo = true;
        result.video_ = value;
        return this;
      }
      public Builder ClearVideo() {
        PrepareBuilder();
        result.hasVideo = false;
        result.video_ = "";
        return this;
      }
      
      public bool HasMaterial {
        get { return result.hasMaterial; }
      }
      public string Material {
        get { return result.Material; }
        set { SetMaterial(value); }
      }
      public Builder SetMaterial(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMaterial = true;
        result.material_ = value;
        return this;
      }
      public Builder ClearMaterial() {
        PrepareBuilder();
        result.hasMaterial = false;
        result.material_ = "";
        return this;
      }
    }
    static CFResource() {
      object.ReferenceEquals(global::com.oegame.guandan.protobuf.PbConfig.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CFSkill : pb::GeneratedMessage<CFSkill, CFSkill.Builder> {
    private CFSkill() { }
    private static readonly CFSkill defaultInstance = new CFSkill().MakeReadOnly();
    private static readonly string[] _cFSkillFieldNames = new string[] { "desc", "effect", "id", "isrally", "name", "type" };
    private static readonly uint[] _cFSkillFieldTags = new uint[] { 26, 50, 8, 32, 18, 40 };
    public static CFSkill DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CFSkill DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CFSkill ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.oegame.guandan.protobuf.PbConfig.internal__static_com_oegame_guandan_protobuf_CFSkill__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CFSkill, CFSkill.Builder> InternalFieldAccessors {
      get { return global::com.oegame.guandan.protobuf.PbConfig.internal__static_com_oegame_guandan_protobuf_CFSkill__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int DescFieldNumber = 3;
    private bool hasDesc;
    private string desc_ = "";
    public bool HasDesc {
      get { return hasDesc; }
    }
    public string Desc {
      get { return desc_; }
    }
    
    public const int IsrallyFieldNumber = 4;
    private bool hasIsrally;
    private int isrally_;
    public bool HasIsrally {
      get { return hasIsrally; }
    }
    public int Isrally {
      get { return isrally_; }
    }
    
    public const int TypeFieldNumber = 5;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int EffectFieldNumber = 6;
    private bool hasEffect;
    private string effect_ = "";
    public bool HasEffect {
      get { return hasEffect; }
    }
    public string Effect {
      get { return effect_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cFSkillFieldNames;
      if (hasId) {
        output.WriteSInt32(1, field_names[2], Id);
      }
      if (hasName) {
        output.WriteString(2, field_names[4], Name);
      }
      if (hasDesc) {
        output.WriteString(3, field_names[0], Desc);
      }
      if (hasIsrally) {
        output.WriteSInt32(4, field_names[3], Isrally);
      }
      if (hasType) {
        output.WriteSInt32(5, field_names[5], Type);
      }
      if (hasEffect) {
        output.WriteString(6, field_names[1], Effect);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeSInt32Size(1, Id);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Name);
        }
        if (hasDesc) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Desc);
        }
        if (hasIsrally) {
          size += pb::CodedOutputStream.ComputeSInt32Size(4, Isrally);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeSInt32Size(5, Type);
        }
        if (hasEffect) {
          size += pb::CodedOutputStream.ComputeStringSize(6, Effect);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CFSkill ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CFSkill ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CFSkill ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CFSkill ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CFSkill ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CFSkill ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CFSkill ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CFSkill ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CFSkill ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CFSkill ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CFSkill MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CFSkill prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CFSkill, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CFSkill cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CFSkill result;
      
      private CFSkill PrepareBuilder() {
        if (resultIsReadOnly) {
          CFSkill original = result;
          result = new CFSkill();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CFSkill MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.oegame.guandan.protobuf.CFSkill.Descriptor; }
      }
      
      public override CFSkill DefaultInstanceForType {
        get { return global::com.oegame.guandan.protobuf.CFSkill.DefaultInstance; }
      }
      
      public override CFSkill BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CFSkill) {
          return MergeFrom((CFSkill) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CFSkill other) {
        if (other == global::com.oegame.guandan.protobuf.CFSkill.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasDesc) {
          Desc = other.Desc;
        }
        if (other.HasIsrally) {
          Isrally = other.Isrally;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasEffect) {
          Effect = other.Effect;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cFSkillFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cFSkillFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadSInt32(ref result.id_);
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 26: {
              result.hasDesc = input.ReadString(ref result.desc_);
              break;
            }
            case 32: {
              result.hasIsrally = input.ReadSInt32(ref result.isrally_);
              break;
            }
            case 40: {
              result.hasType = input.ReadSInt32(ref result.type_);
              break;
            }
            case 50: {
              result.hasEffect = input.ReadString(ref result.effect_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasDesc {
        get { return result.hasDesc; }
      }
      public string Desc {
        get { return result.Desc; }
        set { SetDesc(value); }
      }
      public Builder SetDesc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDesc = true;
        result.desc_ = value;
        return this;
      }
      public Builder ClearDesc() {
        PrepareBuilder();
        result.hasDesc = false;
        result.desc_ = "";
        return this;
      }
      
      public bool HasIsrally {
        get { return result.hasIsrally; }
      }
      public int Isrally {
        get { return result.Isrally; }
        set { SetIsrally(value); }
      }
      public Builder SetIsrally(int value) {
        PrepareBuilder();
        result.hasIsrally = true;
        result.isrally_ = value;
        return this;
      }
      public Builder ClearIsrally() {
        PrepareBuilder();
        result.hasIsrally = false;
        result.isrally_ = 0;
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasEffect {
        get { return result.hasEffect; }
      }
      public string Effect {
        get { return result.Effect; }
        set { SetEffect(value); }
      }
      public Builder SetEffect(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEffect = true;
        result.effect_ = value;
        return this;
      }
      public Builder ClearEffect() {
        PrepareBuilder();
        result.hasEffect = false;
        result.effect_ = "";
        return this;
      }
    }
    static CFSkill() {
      object.ReferenceEquals(global::com.oegame.guandan.protobuf.PbConfig.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
