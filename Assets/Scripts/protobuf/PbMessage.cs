// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace com.oegame.mahjong.protobuf {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class PbMessage {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_com_oegame_mahjong_protobuf_ProtoDataPackage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.oegame.mahjong.protobuf.ProtoDataPackage, global::com.oegame.mahjong.protobuf.ProtoDataPackage.Builder> internal__static_com_oegame_mahjong_protobuf_ProtoDataPackage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_oegame_mahjong_protobuf_CompDataPackage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.oegame.mahjong.protobuf.CompDataPackage, global::com.oegame.mahjong.protobuf.CompDataPackage.Builder> internal__static_com_oegame_mahjong_protobuf_CompDataPackage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_oegame_mahjong_protobuf_HandShake__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.oegame.mahjong.protobuf.HandShake, global::com.oegame.mahjong.protobuf.HandShake.Builder> internal__static_com_oegame_mahjong_protobuf_HandShake__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static PbMessage() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChBwYl9tZXNzYWdlLnByb3RvEhtjb20ub2VnYW1lLm1haGpvbmcucHJvdG9i" + 
          "dWYiPAoQUHJvdG9EYXRhUGFja2FnZRIMCgRjb2RlGAEgASgREgwKBGRhdGEY" + 
          "AiABKAwSDAoEbWFyaxgDIAEoESItCg9Db21wRGF0YVBhY2thZ2USDAoEY29t" + 
          "cBgBIAEoCBIMCgRpbmZvGAIgASgMIi4KCUhhbmRTaGFrZRINCgV0b2tlbhgB" + 
          "IAEoCRISCgpwYXNzcG9ydElkGAIgASgRQigKG2NvbS5vZWdhbWUubWFoam9u" + 
          "Zy5wcm90b2J1ZkIJUEJNZXNzYWdl");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_com_oegame_mahjong_protobuf_ProtoDataPackage__Descriptor = Descriptor.MessageTypes[0];
        internal__static_com_oegame_mahjong_protobuf_ProtoDataPackage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.oegame.mahjong.protobuf.ProtoDataPackage, global::com.oegame.mahjong.protobuf.ProtoDataPackage.Builder>(internal__static_com_oegame_mahjong_protobuf_ProtoDataPackage__Descriptor,
                new string[] { "Code", "Data", "Mark", });
        internal__static_com_oegame_mahjong_protobuf_CompDataPackage__Descriptor = Descriptor.MessageTypes[1];
        internal__static_com_oegame_mahjong_protobuf_CompDataPackage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.oegame.mahjong.protobuf.CompDataPackage, global::com.oegame.mahjong.protobuf.CompDataPackage.Builder>(internal__static_com_oegame_mahjong_protobuf_CompDataPackage__Descriptor,
                new string[] { "Comp", "Info", });
        internal__static_com_oegame_mahjong_protobuf_HandShake__Descriptor = Descriptor.MessageTypes[2];
        internal__static_com_oegame_mahjong_protobuf_HandShake__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.oegame.mahjong.protobuf.HandShake, global::com.oegame.mahjong.protobuf.HandShake.Builder>(internal__static_com_oegame_mahjong_protobuf_HandShake__Descriptor,
                new string[] { "Token", "PassportId", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ProtoDataPackage : pb::GeneratedMessage<ProtoDataPackage, ProtoDataPackage.Builder> {
    private ProtoDataPackage() { }
    private static readonly ProtoDataPackage defaultInstance = new ProtoDataPackage().MakeReadOnly();
    private static readonly string[] _protoDataPackageFieldNames = new string[] { "code", "data", "mark" };
    private static readonly uint[] _protoDataPackageFieldTags = new uint[] { 8, 18, 24 };
    public static ProtoDataPackage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ProtoDataPackage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ProtoDataPackage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.oegame.mahjong.protobuf.PbMessage.internal__static_com_oegame_mahjong_protobuf_ProtoDataPackage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ProtoDataPackage, ProtoDataPackage.Builder> InternalFieldAccessors {
      get { return global::com.oegame.mahjong.protobuf.PbMessage.internal__static_com_oegame_mahjong_protobuf_ProtoDataPackage__FieldAccessorTable; }
    }
    
    public const int CodeFieldNumber = 1;
    private bool hasCode;
    private int code_;
    public bool HasCode {
      get { return hasCode; }
    }
    public int Code {
      get { return code_; }
    }
    
    public const int DataFieldNumber = 2;
    private bool hasData;
    private pb::ByteString data_ = pb::ByteString.Empty;
    public bool HasData {
      get { return hasData; }
    }
    public pb::ByteString Data {
      get { return data_; }
    }
    
    public const int MarkFieldNumber = 3;
    private bool hasMark;
    private int mark_;
    public bool HasMark {
      get { return hasMark; }
    }
    public int Mark {
      get { return mark_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _protoDataPackageFieldNames;
      if (hasCode) {
        output.WriteSInt32(1, field_names[0], Code);
      }
      if (hasData) {
        output.WriteBytes(2, field_names[1], Data);
      }
      if (hasMark) {
        output.WriteSInt32(3, field_names[2], Mark);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCode) {
          size += pb::CodedOutputStream.ComputeSInt32Size(1, Code);
        }
        if (hasData) {
          size += pb::CodedOutputStream.ComputeBytesSize(2, Data);
        }
        if (hasMark) {
          size += pb::CodedOutputStream.ComputeSInt32Size(3, Mark);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ProtoDataPackage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ProtoDataPackage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ProtoDataPackage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ProtoDataPackage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ProtoDataPackage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ProtoDataPackage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ProtoDataPackage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ProtoDataPackage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ProtoDataPackage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ProtoDataPackage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ProtoDataPackage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ProtoDataPackage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ProtoDataPackage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ProtoDataPackage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ProtoDataPackage result;
      
      private ProtoDataPackage PrepareBuilder() {
        if (resultIsReadOnly) {
          ProtoDataPackage original = result;
          result = new ProtoDataPackage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ProtoDataPackage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.oegame.mahjong.protobuf.ProtoDataPackage.Descriptor; }
      }
      
      public override ProtoDataPackage DefaultInstanceForType {
        get { return global::com.oegame.mahjong.protobuf.ProtoDataPackage.DefaultInstance; }
      }
      
      public override ProtoDataPackage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ProtoDataPackage) {
          return MergeFrom((ProtoDataPackage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ProtoDataPackage other) {
        if (other == global::com.oegame.mahjong.protobuf.ProtoDataPackage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCode) {
          Code = other.Code;
        }
        if (other.HasData) {
          Data = other.Data;
        }
        if (other.HasMark) {
          Mark = other.Mark;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_protoDataPackageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _protoDataPackageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCode = input.ReadSInt32(ref result.code_);
              break;
            }
            case 18: {
              result.hasData = input.ReadBytes(ref result.data_);
              break;
            }
            case 24: {
              result.hasMark = input.ReadSInt32(ref result.mark_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCode {
        get { return result.hasCode; }
      }
      public int Code {
        get { return result.Code; }
        set { SetCode(value); }
      }
      public Builder SetCode(int value) {
        PrepareBuilder();
        result.hasCode = true;
        result.code_ = value;
        return this;
      }
      public Builder ClearCode() {
        PrepareBuilder();
        result.hasCode = false;
        result.code_ = 0;
        return this;
      }
      
      public bool HasData {
        get { return result.hasData; }
      }
      public pb::ByteString Data {
        get { return result.Data; }
        set { SetData(value); }
      }
      public Builder SetData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.hasData = false;
        result.data_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasMark {
        get { return result.hasMark; }
      }
      public int Mark {
        get { return result.Mark; }
        set { SetMark(value); }
      }
      public Builder SetMark(int value) {
        PrepareBuilder();
        result.hasMark = true;
        result.mark_ = value;
        return this;
      }
      public Builder ClearMark() {
        PrepareBuilder();
        result.hasMark = false;
        result.mark_ = 0;
        return this;
      }
    }
    static ProtoDataPackage() {
      object.ReferenceEquals(global::com.oegame.mahjong.protobuf.PbMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CompDataPackage : pb::GeneratedMessage<CompDataPackage, CompDataPackage.Builder> {
    private CompDataPackage() { }
    private static readonly CompDataPackage defaultInstance = new CompDataPackage().MakeReadOnly();
    private static readonly string[] _compDataPackageFieldNames = new string[] { "comp", "info" };
    private static readonly uint[] _compDataPackageFieldTags = new uint[] { 8, 18 };
    public static CompDataPackage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CompDataPackage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CompDataPackage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.oegame.mahjong.protobuf.PbMessage.internal__static_com_oegame_mahjong_protobuf_CompDataPackage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CompDataPackage, CompDataPackage.Builder> InternalFieldAccessors {
      get { return global::com.oegame.mahjong.protobuf.PbMessage.internal__static_com_oegame_mahjong_protobuf_CompDataPackage__FieldAccessorTable; }
    }
    
    public const int CompFieldNumber = 1;
    private bool hasComp;
    private bool comp_;
    public bool HasComp {
      get { return hasComp; }
    }
    public bool Comp {
      get { return comp_; }
    }
    
    public const int InfoFieldNumber = 2;
    private bool hasInfo;
    private pb::ByteString info_ = pb::ByteString.Empty;
    public bool HasInfo {
      get { return hasInfo; }
    }
    public pb::ByteString Info {
      get { return info_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _compDataPackageFieldNames;
      if (hasComp) {
        output.WriteBool(1, field_names[0], Comp);
      }
      if (hasInfo) {
        output.WriteBytes(2, field_names[1], Info);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasComp) {
          size += pb::CodedOutputStream.ComputeBoolSize(1, Comp);
        }
        if (hasInfo) {
          size += pb::CodedOutputStream.ComputeBytesSize(2, Info);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CompDataPackage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CompDataPackage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CompDataPackage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CompDataPackage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CompDataPackage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CompDataPackage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CompDataPackage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CompDataPackage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CompDataPackage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CompDataPackage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CompDataPackage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CompDataPackage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CompDataPackage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CompDataPackage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CompDataPackage result;
      
      private CompDataPackage PrepareBuilder() {
        if (resultIsReadOnly) {
          CompDataPackage original = result;
          result = new CompDataPackage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CompDataPackage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.oegame.mahjong.protobuf.CompDataPackage.Descriptor; }
      }
      
      public override CompDataPackage DefaultInstanceForType {
        get { return global::com.oegame.mahjong.protobuf.CompDataPackage.DefaultInstance; }
      }
      
      public override CompDataPackage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CompDataPackage) {
          return MergeFrom((CompDataPackage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CompDataPackage other) {
        if (other == global::com.oegame.mahjong.protobuf.CompDataPackage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasComp) {
          Comp = other.Comp;
        }
        if (other.HasInfo) {
          Info = other.Info;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_compDataPackageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _compDataPackageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasComp = input.ReadBool(ref result.comp_);
              break;
            }
            case 18: {
              result.hasInfo = input.ReadBytes(ref result.info_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasComp {
        get { return result.hasComp; }
      }
      public bool Comp {
        get { return result.Comp; }
        set { SetComp(value); }
      }
      public Builder SetComp(bool value) {
        PrepareBuilder();
        result.hasComp = true;
        result.comp_ = value;
        return this;
      }
      public Builder ClearComp() {
        PrepareBuilder();
        result.hasComp = false;
        result.comp_ = false;
        return this;
      }
      
      public bool HasInfo {
        get { return result.hasInfo; }
      }
      public pb::ByteString Info {
        get { return result.Info; }
        set { SetInfo(value); }
      }
      public Builder SetInfo(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInfo = true;
        result.info_ = value;
        return this;
      }
      public Builder ClearInfo() {
        PrepareBuilder();
        result.hasInfo = false;
        result.info_ = pb::ByteString.Empty;
        return this;
      }
    }
    static CompDataPackage() {
      object.ReferenceEquals(global::com.oegame.mahjong.protobuf.PbMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class HandShake : pb::GeneratedMessage<HandShake, HandShake.Builder> {
    private HandShake() { }
    private static readonly HandShake defaultInstance = new HandShake().MakeReadOnly();
    private static readonly string[] _handShakeFieldNames = new string[] { "passportId", "token" };
    private static readonly uint[] _handShakeFieldTags = new uint[] { 16, 10 };
    public static HandShake DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override HandShake DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override HandShake ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.oegame.mahjong.protobuf.PbMessage.internal__static_com_oegame_mahjong_protobuf_HandShake__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<HandShake, HandShake.Builder> InternalFieldAccessors {
      get { return global::com.oegame.mahjong.protobuf.PbMessage.internal__static_com_oegame_mahjong_protobuf_HandShake__FieldAccessorTable; }
    }
    
    public const int TokenFieldNumber = 1;
    private bool hasToken;
    private string token_ = "";
    public bool HasToken {
      get { return hasToken; }
    }
    public string Token {
      get { return token_; }
    }
    
    public const int PassportIdFieldNumber = 2;
    private bool hasPassportId;
    private int passportId_;
    public bool HasPassportId {
      get { return hasPassportId; }
    }
    public int PassportId {
      get { return passportId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _handShakeFieldNames;
      if (hasToken) {
        output.WriteString(1, field_names[1], Token);
      }
      if (hasPassportId) {
        output.WriteSInt32(2, field_names[0], PassportId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasToken) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Token);
        }
        if (hasPassportId) {
          size += pb::CodedOutputStream.ComputeSInt32Size(2, PassportId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static HandShake ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HandShake ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HandShake ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HandShake ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HandShake ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HandShake ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static HandShake ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static HandShake ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static HandShake ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HandShake ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private HandShake MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(HandShake prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<HandShake, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(HandShake cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private HandShake result;
      
      private HandShake PrepareBuilder() {
        if (resultIsReadOnly) {
          HandShake original = result;
          result = new HandShake();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override HandShake MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.oegame.mahjong.protobuf.HandShake.Descriptor; }
      }
      
      public override HandShake DefaultInstanceForType {
        get { return global::com.oegame.mahjong.protobuf.HandShake.DefaultInstance; }
      }
      
      public override HandShake BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is HandShake) {
          return MergeFrom((HandShake) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(HandShake other) {
        if (other == global::com.oegame.mahjong.protobuf.HandShake.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasToken) {
          Token = other.Token;
        }
        if (other.HasPassportId) {
          PassportId = other.PassportId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_handShakeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _handShakeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasToken = input.ReadString(ref result.token_);
              break;
            }
            case 16: {
              result.hasPassportId = input.ReadSInt32(ref result.passportId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasToken {
        get { return result.hasToken; }
      }
      public string Token {
        get { return result.Token; }
        set { SetToken(value); }
      }
      public Builder SetToken(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasToken = true;
        result.token_ = value;
        return this;
      }
      public Builder ClearToken() {
        PrepareBuilder();
        result.hasToken = false;
        result.token_ = "";
        return this;
      }
      
      public bool HasPassportId {
        get { return result.hasPassportId; }
      }
      public int PassportId {
        get { return result.PassportId; }
        set { SetPassportId(value); }
      }
      public Builder SetPassportId(int value) {
        PrepareBuilder();
        result.hasPassportId = true;
        result.passportId_ = value;
        return this;
      }
      public Builder ClearPassportId() {
        PrepareBuilder();
        result.hasPassportId = false;
        result.passportId_ = 0;
        return this;
      }
    }
    static HandShake() {
      object.ReferenceEquals(global::com.oegame.mahjong.protobuf.PbMessage.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
